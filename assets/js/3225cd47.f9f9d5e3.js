"use strict";(self.webpackChunkreact_native_website=self.webpackChunkreact_native_website||[]).push([[502],{1439:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"0.62","label":"0.62","banner":"unmaintained","badge":true,"className":"docs-version-0.62","isLast":false,"docsSidebars":{"version-0.62/docs":[{"type":"category","label":"The Basics","items":[{"type":"link","label":"Introduction","href":"/docs/0.62/getting-started","docId":"getting-started"},{"type":"link","label":"Core Components and Native Components","href":"/docs/0.62/intro-react-native-components","docId":"intro-react-native-components"},{"type":"link","label":"React Fundamentals","href":"/docs/0.62/intro-react","docId":"intro-react"},{"type":"link","label":"Handling Text Input","href":"/docs/0.62/handling-text-input","docId":"handling-text-input"},{"type":"link","label":"Using a ScrollView","href":"/docs/0.62/using-a-scrollview","docId":"using-a-scrollview"},{"type":"link","label":"Using List Views","href":"/docs/0.62/using-a-listview","docId":"using-a-listview"},{"type":"link","label":"Troubleshooting","href":"/docs/0.62/troubleshooting","docId":"troubleshooting"},{"type":"link","label":"Platform Specific Code","href":"/docs/0.62/platform-specific-code","docId":"platform-specific-code"},{"type":"link","label":"More Resources","href":"/docs/0.62/more-resources","docId":"more-resources"}],"collapsible":true,"collapsed":true},{"type":"category","label":"Environment setup","items":[{"type":"link","label":"Setting up the development environment","href":"/docs/0.62/environment-setup","docId":"environment-setup"},{"type":"link","label":"Integration with Existing Apps","href":"/docs/0.62/integration-with-existing-apps","docId":"integration-with-existing-apps"},{"type":"link","label":"Building For TV Devices","href":"/docs/0.62/building-for-tv","docId":"building-for-tv"},{"type":"link","label":"Out-of-Tree Platforms","href":"/docs/0.62/out-of-tree-platforms","docId":"out-of-tree-platforms"}],"collapsible":true,"collapsed":true},{"type":"category","label":"Workflow","items":[{"type":"link","label":"Running On Device","href":"/docs/0.62/running-on-device","docId":"running-on-device"},{"type":"link","label":"Fast Refresh","href":"/docs/0.62/fast-refresh","docId":"fast-refresh"},{"type":"link","label":"Debugging","href":"/docs/0.62/debugging","docId":"debugging"},{"type":"link","label":"Testing","href":"/docs/0.62/testing-overview","docId":"testing-overview"},{"type":"link","label":"Using Libraries","href":"/docs/0.62/libraries","docId":"libraries"},{"type":"link","label":"Using TypeScript with React Native","href":"/docs/0.62/typescript","docId":"typescript"},{"type":"link","label":"Upgrading to new React Native versions","href":"/docs/0.62/upgrading","docId":"upgrading"}],"collapsible":true,"collapsed":true},{"type":"category","label":"Design","items":[{"type":"link","label":"Style","href":"/docs/0.62/style","docId":"style"},{"type":"link","label":"Height and Width","href":"/docs/0.62/height-and-width","docId":"height-and-width"},{"type":"link","label":"Layout with Flexbox","href":"/docs/0.62/flexbox","docId":"flexbox"},{"type":"link","label":"Images","href":"/docs/0.62/images","docId":"images"},{"type":"link","label":"Color Reference","href":"/docs/0.62/colors","docId":"colors"}],"collapsible":true,"collapsed":true},{"type":"category","label":"Interaction","items":[{"type":"link","label":"Handling Touches","href":"/docs/0.62/handling-touches","docId":"handling-touches"},{"type":"link","label":"Navigating Between Screens","href":"/docs/0.62/navigation","docId":"navigation"},{"type":"link","label":"Animations","href":"/docs/0.62/animations","docId":"animations"},{"type":"link","label":"Gesture Responder System","href":"/docs/0.62/gesture-responder-system","docId":"gesture-responder-system"}],"collapsible":true,"collapsed":true},{"type":"category","label":"Inclusion","items":[{"type":"link","label":"Accessibility","href":"/docs/0.62/accessibility","docId":"accessibility"}],"collapsible":true,"collapsed":true},{"type":"category","label":"Performance","items":[{"type":"link","label":"Performance Overview","href":"/docs/0.62/performance","docId":"performance"},{"type":"link","label":"Optimizing Flatlist Configuration","href":"/docs/0.62/optimizing-flatlist-configuration","docId":"optimizing-flatlist-configuration"},{"type":"link","label":"RAM Bundles and Inline Requires","href":"/docs/0.62/ram-bundles-inline-requires","docId":"ram-bundles-inline-requires"},{"type":"link","label":"Profiling","href":"/docs/0.62/profiling","docId":"profiling"}],"collapsible":true,"collapsed":true},{"type":"category","label":"JavaScript Runtime","items":[{"type":"link","label":"JavaScript Environment","href":"/docs/0.62/javascript-environment","docId":"javascript-environment"},{"type":"link","label":"Timers","href":"/docs/0.62/timers","docId":"timers"},{"type":"link","label":"Using Hermes","href":"/docs/0.62/hermes","docId":"hermes"}],"collapsible":true,"collapsed":true},{"type":"category","label":"Connectivity","items":[{"type":"link","label":"Networking","href":"/docs/0.62/network","docId":"network"},{"type":"link","label":"Security","href":"/docs/0.62/security","docId":"security"}],"collapsible":true,"collapsed":true},{"type":"category","label":"Native Components and Modules","items":[{"type":"link","label":"Native Modules Setup","href":"/docs/0.62/native-modules-setup","docId":"native-modules-setup"},{"type":"link","label":"Direct Manipulation","href":"/docs/0.62/direct-manipulation","docId":"direct-manipulation"}],"collapsible":true,"collapsed":true},{"type":"category","label":"Guides (Android)","items":[{"type":"link","label":"Native Modules","href":"/docs/0.62/native-modules-android","docId":"native-modules-android"},{"type":"link","label":"Native UI Components","href":"/docs/0.62/native-components-android","docId":"native-components-android"},{"type":"link","label":"Headless JS","href":"/docs/0.62/headless-js-android","docId":"headless-js-android"},{"type":"link","label":"Publishing to Google Play Store","href":"/docs/0.62/signed-apk-android","docId":"signed-apk-android"},{"type":"link","label":"Removing Default Permissions","href":"/docs/0.62/removing-default-permissions","docId":"removing-default-permissions"}],"collapsible":true,"collapsed":true},{"type":"category","label":"Guides (iOS)","items":[{"type":"link","label":"Native Modules","href":"/docs/0.62/native-modules-ios","docId":"native-modules-ios"},{"type":"link","label":"Native UI Components","href":"/docs/0.62/native-components-ios","docId":"native-components-ios"},{"type":"link","label":"Linking Libraries","href":"/docs/0.62/linking-libraries-ios","docId":"linking-libraries-ios"},{"type":"link","label":"Running On Simulator","href":"/docs/0.62/running-on-simulator-ios","docId":"running-on-simulator-ios"},{"type":"link","label":"Communication between native and React Native","href":"/docs/0.62/communication-ios","docId":"communication-ios"},{"type":"link","label":"App Extensions","href":"/docs/0.62/app-extensions","docId":"app-extensions"}],"collapsible":true,"collapsed":true}],"version-0.62/components":[{"type":"category","label":"Core Components","items":[{"type":"link","label":"Core Components and APIs","href":"/docs/0.62/components-and-apis","docId":"components-and-apis"},{"type":"link","label":"ActivityIndicator","href":"/docs/0.62/activityindicator","docId":"activityindicator"},{"type":"link","label":"Button","href":"/docs/0.62/button","docId":"button"},{"type":"link","label":"FlatList","href":"/docs/0.62/flatlist","docId":"flatlist"},{"type":"link","label":"Image","href":"/docs/0.62/image","docId":"image"},{"type":"link","label":"ImageBackground","href":"/docs/0.62/imagebackground","docId":"imagebackground"},{"type":"link","label":"KeyboardAvoidingView","href":"/docs/0.62/keyboardavoidingview","docId":"keyboardavoidingview"},{"type":"link","label":"Modal","href":"/docs/0.62/modal","docId":"modal"},{"type":"link","label":"RefreshControl","href":"/docs/0.62/refreshcontrol","docId":"refreshcontrol"},{"type":"link","label":"SafeAreaView","href":"/docs/0.62/safeareaview","docId":"safeareaview"},{"type":"link","label":"ScrollView","href":"/docs/0.62/scrollview","docId":"scrollview"},{"type":"link","label":"SectionList","href":"/docs/0.62/sectionlist","docId":"sectionlist"},{"type":"link","label":"StatusBar","href":"/docs/0.62/statusbar","docId":"statusbar"},{"type":"link","label":"Switch","href":"/docs/0.62/switch","docId":"switch"},{"type":"link","label":"Text","href":"/docs/0.62/text","docId":"text"},{"type":"link","label":"TextInput","href":"/docs/0.62/textinput","docId":"textinput"},{"type":"link","label":"TouchableHighlight","href":"/docs/0.62/touchablehighlight","docId":"touchablehighlight"},{"type":"link","label":"TouchableOpacity","href":"/docs/0.62/touchableopacity","docId":"touchableopacity"},{"type":"link","label":"TouchableWithoutFeedback","href":"/docs/0.62/touchablewithoutfeedback","docId":"touchablewithoutfeedback"},{"type":"link","label":"View","href":"/docs/0.62/view","docId":"view"},{"type":"link","label":"VirtualizedList","href":"/docs/0.62/virtualizedlist","docId":"virtualizedlist"},{"type":"category","label":"Android Components","items":[{"type":"link","label":"DrawerLayoutAndroid","href":"/docs/0.62/drawerlayoutandroid","docId":"drawerlayoutandroid"},{"type":"link","label":"TouchableNativeFeedback","href":"/docs/0.62/touchablenativefeedback","docId":"touchablenativefeedback"}],"collapsible":true,"collapsed":true},{"type":"category","label":"iOS Components","items":[{"type":"link","label":"InputAccessoryView","href":"/docs/0.62/inputaccessoryview","docId":"inputaccessoryview"}],"collapsible":true,"collapsed":true}],"collapsible":true,"collapsed":true},{"type":"category","label":"Props","items":[{"type":"link","label":"Image Style Props","href":"/docs/0.62/image-style-props","docId":"image-style-props"},{"type":"link","label":"Layout Props","href":"/docs/0.62/layout-props","docId":"layout-props"},{"type":"link","label":"Shadow Props","href":"/docs/0.62/shadow-props","docId":"shadow-props"},{"type":"link","label":"Text Style Props","href":"/docs/0.62/text-style-props","docId":"text-style-props"},{"type":"link","label":"View Style Props","href":"/docs/0.62/view-style-props","docId":"view-style-props"}],"collapsible":true,"collapsed":true}],"version-0.62/api":[{"type":"category","label":"APIs","items":[{"type":"link","label":"AccessibilityInfo","href":"/docs/0.62/accessibilityinfo","docId":"accessibilityinfo"},{"type":"link","label":"Alert","href":"/docs/0.62/alert","docId":"alert"},{"type":"link","label":"Animated","href":"/docs/0.62/animated","docId":"animated"},{"type":"link","label":"Appearance","href":"/docs/0.62/appearance","docId":"appearance"},{"type":"link","label":"AppRegistry","href":"/docs/0.62/appregistry","docId":"appregistry"},{"type":"link","label":"AppState","href":"/docs/0.62/appstate","docId":"appstate"},{"type":"link","label":"DevSettings","href":"/docs/0.62/devsettings","docId":"devsettings"},{"type":"link","label":"Dimensions","href":"/docs/0.62/dimensions","docId":"dimensions"},{"type":"link","label":"Easing","href":"/docs/0.62/easing","docId":"easing"},{"type":"link","label":"InteractionManager","href":"/docs/0.62/interactionmanager","docId":"interactionmanager"},{"type":"link","label":"Keyboard","href":"/docs/0.62/keyboard","docId":"keyboard"},{"type":"link","label":"LayoutAnimation","href":"/docs/0.62/layoutanimation","docId":"layoutanimation"},{"type":"link","label":"Linking","href":"/docs/0.62/linking","docId":"linking"},{"type":"link","label":"PanResponder","href":"/docs/0.62/panresponder","docId":"panresponder"},{"type":"link","label":"PixelRatio","href":"/docs/0.62/pixelratio","docId":"pixelratio"},{"type":"link","label":"Share","href":"/docs/0.62/share","docId":"share"},{"type":"link","label":"StyleSheet","href":"/docs/0.62/stylesheet","docId":"stylesheet"},{"type":"link","label":"Systrace","href":"/docs/0.62/systrace","docId":"systrace"},{"type":"link","label":"Transforms","href":"/docs/0.62/transforms","docId":"transforms"},{"type":"link","label":"Vibration","href":"/docs/0.62/vibration","docId":"vibration"},{"type":"category","label":"Hooks","items":[{"type":"link","label":"useColorScheme","href":"/docs/0.62/usecolorscheme","docId":"usecolorscheme"},{"type":"link","label":"useWindowDimensions","href":"/docs/0.62/usewindowdimensions","docId":"usewindowdimensions"}],"collapsible":true,"collapsed":true},{"type":"category","label":"Android APIs","items":[{"type":"link","label":"BackHandler","href":"/docs/0.62/backhandler","docId":"backhandler"},{"type":"link","label":"PermissionsAndroid","href":"/docs/0.62/permissionsandroid","docId":"permissionsandroid"},{"type":"link","label":"ToastAndroid","href":"/docs/0.62/toastandroid","docId":"toastandroid"}],"collapsible":true,"collapsed":true},{"type":"category","label":"iOS APIs","items":[{"type":"link","label":"ActionSheetIOS","href":"/docs/0.62/actionsheetios","docId":"actionsheetios"},{"type":"link","label":"Settings","href":"/docs/0.62/settings","docId":"settings"}],"collapsible":true,"collapsed":true}],"collapsible":true,"collapsed":true}]},"docs":{"accessibility":{"id":"accessibility","title":"Accessibility","description":"Both Android and iOS provide APIs for integrating apps with assistive technologies like the bundled screen readers VoiceOver (iOS) and TalkBack (Android). React Native has complimentary APIs that let your app accommodate all users.","sidebar":"version-0.62/docs"},"accessibilityinfo":{"id":"accessibilityinfo","title":"AccessibilityInfo","description":"Sometimes it\'s useful to know whether or not the device has a screen reader that is currently active. The AccessibilityInfo API is designed for this purpose. You can use it to query the current state of the screen reader as well as to register to be notified when the state of the screen reader changes.","sidebar":"version-0.62/api"},"actionsheetios":{"id":"actionsheetios","title":"ActionSheetIOS","description":"Displays native to iOS Action Sheet component.","sidebar":"version-0.62/api"},"activityindicator":{"id":"activityindicator","title":"ActivityIndicator","description":"Displays a circular loading indicator.","sidebar":"version-0.62/components"},"alert":{"id":"alert","title":"Alert","description":"Launches an alert dialog with the specified title and message.","sidebar":"version-0.62/api"},"alertios":{"id":"alertios","title":"\ud83d\udea7 AlertIOS","description":"Deprecated. Use Alert instead."},"animated":{"id":"animated","title":"Animated","description":"The Animated library is designed to make animations fluid, powerful, and painless to build and maintain. Animated focuses on declarative relationships between inputs and outputs, configurable transforms in between, and start/stop methods to control time-based animation execution.","sidebar":"version-0.62/api"},"animatedvalue":{"id":"animatedvalue","title":"AnimatedValue","description":"Standard value for driving animations. One Animated.Value can drive multiple properties in a synchronized fashion, but can only be driven by one mechanism at a time. Using a new mechanism (e.g. starting a new animation, or calling setValue) will stop any previous ones."},"animatedvaluexy":{"id":"animatedvaluexy","title":"AnimatedValueXY","description":"2D Value for driving 2D animations, such as pan gestures. Almost identical API to normal Animated.Value, but multiplexed. Contains two regular Animated.Values under the hood."},"animations":{"id":"animations","title":"Animations","description":"Animations are very important to create a great user experience. Stationary objects must overcome inertia as they start moving. Objects in motion have momentum and rarely come to a stop immediately. Animations allow you to convey physically believable motion in your interface.","sidebar":"version-0.62/docs"},"app-extensions":{"id":"app-extensions","title":"App Extensions","description":"App extensions let you provide custom functionality and content outside of your main app. There are different types of app extensions on iOS, and they are all covered in the App Extension Programming Guide. In this guide, we\'ll briefly cover how you may take advantage of app extensions on iOS.","sidebar":"version-0.62/docs"},"appearance":{"id":"appearance","title":"Appearance","description":"The Appearance module exposes information about the user\'s appearance preferences, such as their preferred color scheme (light or dark).","sidebar":"version-0.62/api"},"appregistry":{"id":"appregistry","title":"AppRegistry","description":"Project with Native Code Required","sidebar":"version-0.62/api"},"appstate":{"id":"appstate","title":"AppState","description":"AppState can tell you if the app is in the foreground or background, and notify you when the state changes.","sidebar":"version-0.62/api"},"asyncstorage":{"id":"asyncstorage","title":"\ud83d\udea7 AsyncStorage","description":"Deprecated. Use @react-native-community/async-storage instead."},"backandroid":{"id":"backandroid","title":"BackAndroid","description":"Deprecated. Use BackHandler instead."},"backhandler":{"id":"backhandler","title":"BackHandler","description":"The Backhandler API detects hardware button presses for back navigation, lets you register event listeners for the system\'s back action, and lets you control how your application responds. It is Android-only.","sidebar":"version-0.62/api"},"building-for-tv":{"id":"building-for-tv","title":"Building For TV Devices","description":"TV devices support has been implemented with the intention of making existing React Native applications work on Apple TV and Android TV, with few or no changes needed in the JavaScript code for the applications.","sidebar":"version-0.62/docs"},"button":{"id":"button","title":"Button","description":"A basic button component that should render nicely on any platform. Supports a minimal level of customization.","sidebar":"version-0.62/components"},"cameraroll":{"id":"cameraroll","title":"\ud83d\udea7 CameraRoll","description":"Deprecated. Use @react-native-community/cameraroll instead."},"checkbox":{"id":"checkbox","title":"\ud83d\udea7 CheckBox","description":"Deprecated. Use @react-native-community/checkbox instead."},"clipboard":{"id":"clipboard","title":"\ud83d\udea7 Clipboard","description":"Deprecated. Use @react-native-community/clipboard instead."},"colors":{"id":"colors","title":"Color Reference","description":"Components in React Native are styled using JavaScript. Color properties usually match how CSS works on the web.","sidebar":"version-0.62/docs"},"communication-android":{"id":"communication-android","title":"Communication between native and React Native","description":"In Integrating with Existing Apps guide and Native UI Components guide we learn how to embed React Native in a native component and vice versa. When we mix native and React Native components, we\'ll eventually find a need to communicate between these two worlds. Some ways to achieve that have been already mentioned in other guides. This article summarizes available techniques."},"communication-ios":{"id":"communication-ios","title":"Communication between native and React Native","description":"In Integrating with Existing Apps guide and Native UI Components guide we learn how to embed React Native in a native component and vice versa. When we mix native and React Native components, we\'ll eventually find a need to communicate between these two worlds. Some ways to achieve that have been already mentioned in other guides. This article summarizes available techniques.","sidebar":"version-0.62/docs"},"components-and-apis":{"id":"components-and-apis","title":"Core Components and APIs","description":"React Native provides a number of built-in Core Components ready for you to use in your app. You can find them all in the left sidebar (or menu above, if you are on a narrow screen). If you\'re not sure where to get started, take a look at the following categories:","sidebar":"version-0.62/components"},"custom-webview-android":{"id":"custom-webview-android","title":"Custom WebView","description":"While the built-in web view has a lot of features, it is not possible to handle every use-case in React Native. You can, however, extend the web view with native code without forking React Native or duplicating all the existing web view code."},"custom-webview-ios":{"id":"custom-webview-ios","title":"Custom WebView","description":"While the built-in web view has a lot of features, it is not possible to handle every use-case in React Native. You can, however, extend the web view with native code without forking React Native or duplicating all the existing web view code."},"datepickerandroid":{"id":"datepickerandroid","title":"\ud83d\udea7 DatePickerAndroid","description":"Deprecated. Use @react-native-community/datetimepicker instead."},"datepickerios":{"id":"datepickerios","title":"\ud83d\udea7 DatePickerIOS","description":"Deprecated. Use @react-native-community/datetimepicker instead."},"debugging":{"id":"debugging","title":"Debugging","description":"Accessing the In-App Developer Menu","sidebar":"version-0.62/docs"},"devsettings":{"id":"devsettings","title":"DevSettings","description":"The DevSettings module exposes methods for customizing settings for developers in development.","sidebar":"version-0.62/api"},"dimensions":{"id":"dimensions","title":"Dimensions","description":"useWindowDimensions is the preferred API for React components. Unlike Dimensions, it updates as the window\'s dimensions update. This works nicely with the React paradigm.","sidebar":"version-0.62/api"},"direct-manipulation":{"id":"direct-manipulation","title":"Direct Manipulation","description":"It is sometimes necessary to make changes directly to a component without using state/props to trigger a re-render of the entire subtree. When using React in the browser for example, you sometimes need to directly modify a DOM node, and the same is true for views in mobile apps. setNativeProps is the React Native equivalent to setting properties directly on a DOM node.","sidebar":"version-0.62/docs"},"drawerlayoutandroid":{"id":"drawerlayoutandroid","title":"DrawerLayoutAndroid","description":"React component that wraps the platform DrawerLayout (Android only). The Drawer (typically used for navigation) is rendered with renderNavigationView and direct children are the main view (where your content goes). The navigation view is initially not visible on the screen, but can be pulled in from the side of the window specified by the drawerPosition prop and its width can be set by the drawerWidth prop.","sidebar":"version-0.62/components"},"easing":{"id":"easing","title":"Easing","description":"The Easing module implements common easing functions. This module is used by Animated.timing() to convey physically believable motion in animations.","sidebar":"version-0.62/api"},"environment-setup":{"id":"environment-setup","title":"Setting up the development environment","description":"This page will help you install and build your first React Native app.","sidebar":"version-0.62/docs"},"fast-refresh":{"id":"fast-refresh","title":"Fast Refresh","description":"Fast Refresh is a React Native feature that allows you to get near-instant feedback for changes in your React components. Fast Refresh is enabled by default, and you can toggle \\"Enable Fast Refresh\\" in the React Native developer menu. With Fast Refresh enabled, most edits should be visible within a second or two.","sidebar":"version-0.62/docs"},"flatlist":{"id":"flatlist","title":"FlatList","description":"A performant interface for rendering basic, flat lists, supporting the most handy features:","sidebar":"version-0.62/components"},"flexbox":{"id":"flexbox","title":"Layout with Flexbox","description":"A component can specify the layout of its children using the Flexbox algorithm. Flexbox is designed to provide a consistent layout on different screen sizes.","sidebar":"version-0.62/docs"},"geolocation":{"id":"geolocation","title":"\ud83d\udea7 Geolocation","description":"Deprecated. Use @react-native-community/geolocation instead."},"gesture-responder-system":{"id":"gesture-responder-system","title":"Gesture Responder System","description":"The gesture responder system manages the lifecycle of gestures in your app. A touch can go through several phases as the app determines what the user\'s intention is. For example, the app needs to determine if the touch is scrolling, sliding on a widget, or tapping. This can even change during the duration of a touch. There can also be multiple simultaneous touches.","sidebar":"version-0.62/docs"},"getting-started":{"id":"getting-started","title":"Introduction","description":"This helpful guide lays out the prerequisites for learning React Native, using these docs, and setting up your environment.","sidebar":"version-0.62/docs"},"handling-text-input":{"id":"handling-text-input","title":"Handling Text Input","description":"TextInput is a Core Component that allows the user to enter text. It has an onChangeText prop that takes a function to be called every time the text changed, and an onSubmitEditing prop that takes a function to be called when the text is submitted.","sidebar":"version-0.62/docs"},"handling-touches":{"id":"handling-touches","title":"Handling Touches","description":"Users interact with mobile apps mainly through touch. They can use a combination of gestures, such as tapping on a button, scrolling a list, or zooming on a map. React Native provides components to handle all sorts of common gestures, as well as a comprehensive gesture responder system to allow for more advanced gesture recognition, but the one component you will most likely be interested in is the basic Button.","sidebar":"version-0.62/docs"},"headless-js-android":{"id":"headless-js-android","title":"Headless JS","description":"Headless JS is a way to run tasks in JavaScript while your app is in the background. It can be used, for example, to sync fresh data, handle push notifications, or play music.","sidebar":"version-0.62/docs"},"height-and-width":{"id":"height-and-width","title":"Height and Width","description":"A component\'s height and width determine its size on the screen.","sidebar":"version-0.62/docs"},"hermes":{"id":"hermes","title":"Using Hermes","description":"Hermes is an open-source JavaScript engine optimized for running React Native apps on Android. For many apps, enabling Hermes will result in improved start-up time, decreased memory usage, and smaller app size. At this time Hermes is an opt-in React Native feature, and this guide explains how to enable it.","sidebar":"version-0.62/docs"},"image":{"id":"image","title":"Image","description":"A React component for displaying different types of images, including network images, static resources, temporary local images, and images from local disk, such as the camera roll.","sidebar":"version-0.62/components"},"image-style-props":{"id":"image-style-props","title":"Image Style Props","description":"Examples","sidebar":"version-0.62/components"},"imagebackground":{"id":"imagebackground","title":"ImageBackground","description":"A common feature request from developers familiar with the web is background-image. To handle this use case, you can use the ` component, which has the same props as `, and add whatever children to it you would like to layer on top of it.","sidebar":"version-0.62/components"},"imagepickerios":{"id":"imagepickerios","title":"\ud83d\udea7 ImagePickerIOS","description":"Deprecated. Use @react-native-community/image-picker-ios instead."},"images":{"id":"images","title":"Images","description":"Static Image Resources","sidebar":"version-0.62/docs"},"improvingux":{"id":"improvingux","title":"Improving User Experience","description":"Configure text inputs"},"inputaccessoryview":{"id":"inputaccessoryview","title":"InputAccessoryView","description":"A component which enables customization of the keyboard input accessory view on iOS. The input accessory view is displayed above the keyboard whenever a TextInput has focus. This component can be used to create custom toolbars.","sidebar":"version-0.62/components"},"integration-with-existing-apps":{"id":"integration-with-existing-apps","title":"Integration with Existing Apps","description":"React Native is great when you are starting a new mobile app from scratch. However, it also works well for adding a single view or user flow to existing native applications. With a few steps, you can add new React Native based features, screens, views, etc.","sidebar":"version-0.62/docs"},"interactionmanager":{"id":"interactionmanager","title":"InteractionManager","description":"InteractionManager allows long-running work to be scheduled after any interactions/animations have completed. In particular, this allows JavaScript animations to run smoothly.","sidebar":"version-0.62/api"},"intro-react":{"id":"intro-react","title":"React Fundamentals","description":"To understand React Native fully, you need a solid foundation in React. This short introduction to React can help you get started or get refreshed.","sidebar":"version-0.62/docs"},"intro-react-native-components":{"id":"intro-react-native-components","title":"Core Components and Native Components","description":"React Native lets you compose app interfaces using Native Components. Conveniently, it comes with a set of these components for you to get started with right now\u2014the Core Components!","sidebar":"version-0.62/docs"},"javascript-environment":{"id":"javascript-environment","title":"JavaScript Environment","description":"JavaScript Runtime","sidebar":"version-0.62/docs"},"keyboard":{"id":"keyboard","title":"Keyboard","description":"Keyboard module to control keyboard events.","sidebar":"version-0.62/api"},"keyboardavoidingview":{"id":"keyboardavoidingview","title":"KeyboardAvoidingView","description":"It is a component to solve the common problem of views that need to move out of the way of the virtual keyboard. It can automatically adjust either its height, position, or bottom padding based on the keyboard height.","sidebar":"version-0.62/components"},"layout-props":{"id":"layout-props","title":"Layout Props","description":"Example","sidebar":"version-0.62/components"},"layoutanimation":{"id":"layoutanimation","title":"LayoutAnimation","description":"Automatically animates views to their new positions when the next layout happens.","sidebar":"version-0.62/api"},"libraries":{"id":"libraries","title":"Using Libraries","description":"This guide introduces React Native developers to finding, installing, and using third-party libraries in their apps.","sidebar":"version-0.62/docs"},"linking":{"id":"linking","title":"Linking","description":"Projects with Native Code Only","sidebar":"version-0.62/api"},"linking-libraries-ios":{"id":"linking-libraries-ios","title":"Linking Libraries","description":"Not every app uses all the native capabilities, and including the code to support all those features would impact the binary size... But we still want to support adding these features whenever you need them.","sidebar":"version-0.62/docs"},"listview":{"id":"listview","title":"ListView","description":"DEPRECATED - use one of the new list components, such as FlatList or SectionList for bounded memory use, fewer bugs, better performance, an easier to use API, and more features. Check out this blog post for more details."},"listviewdatasource":{"id":"listviewdatasource","title":"ListViewDataSource","description":"Provides efficient data processing and access to the ListView component. A ListViewDataSource is created with functions for extracting data from the input blob, and comparing elements (with default implementations for convenience). The input blob can be as flat as an array of strings, or an object with rows nested inside section objects."},"maskedviewios":{"id":"maskedviewios","title":"\ud83d\udea7 MaskedViewIOS","description":"Deprecated. Use @react-native-community/masked-view instead."},"modal":{"id":"modal","title":"Modal","description":"The Modal component is a basic way to present content above an enclosing view.","sidebar":"version-0.62/components"},"more-resources":{"id":"more-resources","title":"More Resources","description":"Congratulations! You built your first React Native app. But there\u2019s more to learn: developer workflows, shipping to app stores, internationalization, security and more.","sidebar":"version-0.62/docs"},"native-components-android":{"id":"native-components-android","title":"Native UI Components","description":"There are tons of native UI widgets out there ready to be used in the latest apps - some of them are part of the platform, others are available as third-party libraries, and still more might be in use in your very own portfolio. React Native has several of the most critical platform components already wrapped, like ScrollView and TextInput, but not all of them, and certainly not ones you might have written yourself for a previous app. Fortunately, we can wrap up these existing components for seamless integration with your React Native application.","sidebar":"version-0.62/docs"},"native-components-ios":{"id":"native-components-ios","title":"Native UI Components","description":"There are tons of native UI widgets out there ready to be used in the latest apps - some of them are part of the platform, others are available as third-party libraries, and still more might be in use in your very own portfolio. React Native has several of the most critical platform components already wrapped, like ScrollView and TextInput, but not all of them, and certainly not ones you might have written yourself for a previous app. Fortunately, we can wrap up these existing components for seamless integration with your React Native application.","sidebar":"version-0.62/docs"},"native-modules-android":{"id":"native-modules-android","title":"Native Modules","description":"Sometimes an app needs access to a platform API that React Native doesn\'t have a corresponding module for yet. Maybe you want to reuse some existing Java code without having to reimplement it in JavaScript, or write some high performance, multi-threaded code such as for image processing, a database, or any number of advanced extensions.","sidebar":"version-0.62/docs"},"native-modules-ios":{"id":"native-modules-ios","title":"Native Modules","description":"Sometimes an app needs to access a platform API and React Native doesn\'t have a corresponding module yet. Maybe you want to reuse some existing Objective-C, Swift or C++ code without having to reimplement it in JavaScript, or write some high performance, multi-threaded code such as for image processing, a database, or any number of advanced extensions.","sidebar":"version-0.62/docs"},"native-modules-setup":{"id":"native-modules-setup","title":"Native Modules Setup","description":"Native modules are usually distributed as npm packages, except that on top of the usual JavaScript they will include some native code per platform. To understand more about npm packages you may find this guide useful.","sidebar":"version-0.62/docs"},"navigation":{"id":"navigation","title":"Navigating Between Screens","description":"Mobile apps are rarely made up of a single screen. Managing the presentation of, and transition between, multiple screens is typically handled by what is known as a navigator.","sidebar":"version-0.62/docs"},"network":{"id":"network","title":"Networking","description":"Many mobile apps need to load resources from a remote URL. You may want to make a POST request to a REST API, or you may need to fetch a chunk of static content from another server.","sidebar":"version-0.62/docs"},"optimizing-flatlist-configuration":{"id":"optimizing-flatlist-configuration","title":"Optimizing Flatlist Configuration","description":"Terms","sidebar":"version-0.62/docs"},"out-of-tree-platforms":{"id":"out-of-tree-platforms","title":"Out-of-Tree Platforms","description":"React Native is not only for Android and iOS - there are community-supported projects that bring it to other platforms, such as:","sidebar":"version-0.62/docs"},"panresponder":{"id":"panresponder","title":"PanResponder","description":"PanResponder reconciles several touches into a single gesture. It makes single-touch gestures resilient to extra touches, and can be used to recognize basic multi-touch gestures.","sidebar":"version-0.62/api"},"performance":{"id":"performance","title":"Performance Overview","description":"A compelling reason for using React Native instead of WebView-based tools is to achieve 60 frames per second and a native look and feel to your apps. Where possible, we would like for React Native to do the right thing and help you to focus on your app instead of performance optimization, but there are areas where we\'re not quite there yet, and others where React Native (similar to writing native code directly) cannot possibly determine the best way to optimize for you and so manual intervention will be necessary. We try our best to deliver buttery-smooth UI performance by default, but sometimes that isn\'t possible.","sidebar":"version-0.62/docs"},"permissionsandroid":{"id":"permissionsandroid","title":"PermissionsAndroid","description":"Project with Native Code Required","sidebar":"version-0.62/api"},"picker":{"id":"picker","title":"\ud83d\udea7 Picker","description":"Deprecated. Use @react-native-community/picker instead."},"picker-item":{"id":"picker-item","title":"Picker.Item","description":"Individual selectable item in a Picker."},"picker-style-props":{"id":"picker-style-props","title":"Picker Style Props","description":"Picker style props."},"pickerios":{"id":"pickerios","title":"\ud83d\udea7 PickerIOS","description":"Deprecated. Use @react-native-community/picker instead."},"pixelratio":{"id":"pixelratio","title":"PixelRatio","description":"PixelRatio gives you access to the device\'s pixel density and font scale.","sidebar":"version-0.62/api"},"platform-specific-code":{"id":"platform-specific-code","title":"Platform Specific Code","description":"When building a cross-platform app, you\'ll want to re-use as much code as possible. Scenarios may arise where it makes sense for the code to be different, for example you may want to implement separate visual components for Android and iOS.","sidebar":"version-0.62/docs"},"profiling":{"id":"profiling","title":"Profiling","description":"Use the built-in profiler to get detailed information about work done in the JavaScript thread and main thread side-by-side. Access it by selecting Perf Monitor from the Debug menu.","sidebar":"version-0.62/docs"},"progressbarandroid":{"id":"progressbarandroid","title":"\ud83d\udea7 ProgressBarAndroid","description":"Deprecated. Use @react-native-community/progress-bar-android instead."},"progressviewios":{"id":"progressviewios","title":"\ud83d\udea7 ProgressViewIOS","description":"Deprecated. Use @react-native-community/progress-view instead."},"props":{"id":"props","title":"Props","description":"Most components can be customized when they are created, with different parameters. These created parameters are called props, short for properties."},"publishing-forks":{"id":"publishing-forks","title":"Publish your own version of react native","description":"TL;DR"},"publishing-to-app-store":{"id":"publishing-to-app-store","title":"Publishing to Apple App Store","description":"The publishing process is the same as any other native iOS app, with some additional considerations to take into account."},"pushnotificationios":{"id":"pushnotificationios","title":"\ud83d\udea7 PushNotificationIOS","description":"Deprecated. Use @react-native-community/push-notification-ios instead."},"ram-bundles-inline-requires":{"id":"ram-bundles-inline-requires","title":"RAM Bundles and Inline Requires","description":"If you have a large app you may want to consider the Random Access Modules (RAM) bundle format, and using inline requires. This is useful for apps that have a large number of screens which may not ever be opened during a typical usage of the app. Generally it is useful to apps that have large amounts of code that are not needed for a while after startup. For instance the app includes complicated profile screens or lesser used features, but most sessions only involve visiting the main screen of the app for updates. We can optimize the loading of the bundle by using the RAM format and requiring those features and screens inline (when they are actually used).","sidebar":"version-0.62/docs"},"react-node":{"id":"react-node","title":"React Node Object Type","description":"A React Node is one of the following types:"},"refreshcontrol":{"id":"refreshcontrol","title":"RefreshControl","description":"This component is used inside a ScrollView or ListView to add pull to refresh functionality. When the ScrollView is at scrollY: 0, swiping down triggers an onRefresh event.","sidebar":"version-0.62/components"},"removing-default-permissions":{"id":"removing-default-permissions","title":"Removing Default Permissions","description":"By default, some permissions are added to your Android APK.","sidebar":"version-0.62/docs"},"running-on-device":{"id":"running-on-device","title":"Running On Device","description":"It\'s always a good idea to test your app on an actual device before releasing it to your users. This document will guide you through the necessary steps to run your React Native app on a device and to get it ready for production.","sidebar":"version-0.62/docs"},"running-on-simulator-ios":{"id":"running-on-simulator-ios","title":"Running On Simulator","description":"Starting the simulator","sidebar":"version-0.62/docs"},"safeareaview":{"id":"safeareaview","title":"SafeAreaView","description":"The purpose of SafeAreaView is to render content within the safe area boundaries of a device. It is currently only applicable to iOS devices with iOS version 11 or later.","sidebar":"version-0.62/components"},"scrollview":{"id":"scrollview","title":"ScrollView","description":"Component that wraps platform ScrollView while providing integration with touch locking \\"responder\\" system.","sidebar":"version-0.62/components"},"sectionlist":{"id":"sectionlist","title":"SectionList","description":"A performant interface for rendering sectioned lists, supporting the most handy features:","sidebar":"version-0.62/components"},"security":{"id":"security","title":"Security","description":"Security is often overlooked when building apps. It is true that it is impossible to build software that is completely impenetrable\u2014we\u2019ve yet to invent a completely impenetrable lock (bank vaults do, after all, still get broken into). However, the probability of falling victim to a malicious attack or being exposed for a security vulnerability is inversely proportional to the effort you\u2019re willing to put in to protecting your application against any such eventuality. Although an ordinary padlock is pickable, it is still much harder to get past than a cabinet hook!","sidebar":"version-0.62/docs"},"segmentedcontrolios":{"id":"segmentedcontrolios","title":"\ud83d\udea7 SegmentedControlIOS","description":"Deprecated. Use @react-native-community/segmented-control instead."},"settings":{"id":"settings","title":"Settings","description":"Settings serves as a wrapper for NSUserDefaults, a persistent key-value store available only on iOS.","sidebar":"version-0.62/api"},"shadow-props":{"id":"shadow-props","title":"Shadow Props","description":"These properties are iOS only - for similar functionality on Android, use the elevation property.","sidebar":"version-0.62/components"},"share":{"id":"share","title":"Share","description":"Example","sidebar":"version-0.62/api"},"signed-apk-android":{"id":"signed-apk-android","title":"Publishing to Google Play Store","description":"Android requires that all apps be digitally signed with a certificate before they can be installed. In order to distribute your Android application via Google Play store it needs to be signed with a release key that then needs to be used for all future updates. Since 2017 it is possible for Google Play to manage signing releases automatically thanks to App Signing by Google Play functionality. However, before your application binary is uploaded to Google Play it needs to be signed with an upload key. The Signing Your Applications page on Android Developers documentation describes the topic in detail. This guide covers the process in brief, as well as lists the steps required to package the JavaScript bundle.","sidebar":"version-0.62/docs"},"slider":{"id":"slider","title":"\ud83d\udea7 Slider","description":"Deprecated. Use @react-native-community/slider instead."},"snapshotviewios":{"id":"snapshotviewios","title":"SnapshotViewIOS","description":"Props"},"state":{"id":"state","title":"State","description":"There are two types of data that control a component: props and state. props are set by the parent and they are fixed throughout the lifetime of a component. For data that is going to change, we have to use state."},"statusbar":{"id":"statusbar","title":"StatusBar","description":"Component to control the app status bar.","sidebar":"version-0.62/components"},"statusbarios":{"id":"statusbarios","title":"\ud83d\udea7 StatusBarIOS","description":"Deprecated. Use StatusBar for mutating the status bar."},"style":{"id":"style","title":"Style","description":"With React Native, you style your application using JavaScript. All of the core components accept a prop named style. The style names and values usually match how CSS works on the web, except names are written using camel casing, e.g. backgroundColor rather than background-color.","sidebar":"version-0.62/docs"},"stylesheet":{"id":"stylesheet","title":"StyleSheet","description":"A StyleSheet is an abstraction similar to CSS StyleSheets","sidebar":"version-0.62/api"},"switch":{"id":"switch","title":"Switch","description":"Renders a boolean input.","sidebar":"version-0.62/components"},"symbolication":{"id":"symbolication","title":"Symbolicating a stack trace","description":"If a React Native app throws an unhandled exception in a release build, the output may be obfuscated and hard to read:"},"systrace":{"id":"systrace","title":"Systrace","description":"Systrace is a standard Android marker-based profiling tool (and is installed when you install the Android platform-tools package). Profiled code blocks are surrounded by start/end markers which are then visualized in a colorful chart format. Both the Android SDK and React Native framework provide standard markers that you can visualize.","sidebar":"version-0.62/api"},"tabbarios":{"id":"tabbarios","title":"TabBarIOS","description":"Props"},"tabbarios-item":{"id":"tabbarios-item","title":"TabBarIOS.Item","description":"Props"},"testing-overview":{"id":"testing-overview","title":"Testing","description":"This guide introduces React Native developers to the key concepts behind testing, how to write good tests, and what kinds of tests you can incorporate into your workflow.","sidebar":"version-0.62/docs"},"text":{"id":"text","title":"Text","description":"A React component for displaying text.","sidebar":"version-0.62/components"},"text-style-props":{"id":"text-style-props","title":"Text Style Props","description":"Example","sidebar":"version-0.62/components"},"textinput":{"id":"textinput","title":"TextInput","description":"A foundational component for inputting text into the app via a keyboard. Props provide configurability for several features, such as auto-correction, auto-capitalization, placeholder text, and different keyboard types, such as a numeric keypad.","sidebar":"version-0.62/components"},"timepickerandroid":{"id":"timepickerandroid","title":"\ud83d\udea7 TimePickerAndroid","description":"Deprecated. Use @react-native-community/datetimepicker instead."},"timers":{"id":"timers","title":"Timers","description":"Timers are an important part of an application and React Native implements the browser timers.","sidebar":"version-0.62/docs"},"toastandroid":{"id":"toastandroid","title":"ToastAndroid","description":"React Native\'s ToastAndroid API exposes the Android platform\'s ToastAndroid module as a JS module. It provides the method show(message, duration) which takes the following parameters:","sidebar":"version-0.62/api"},"toolbarandroid":{"id":"toolbarandroid","title":"ToolbarAndroid","description":"NOTE: Toolbar Android has been deprecated and removed from the package since React Native v0.61.0. Use @react-native-community/toolbar-android instead."},"touchablehighlight":{"id":"touchablehighlight","title":"TouchableHighlight","description":"A wrapper for making views respond properly to touches. On press down, the opacity of the wrapped view is decreased, which allows the underlay color to show through, darkening or tinting the view.","sidebar":"version-0.62/components"},"touchablenativefeedback":{"id":"touchablenativefeedback","title":"TouchableNativeFeedback","description":"A wrapper for making views respond properly to touches (Android only). On Android this component uses native state drawable to display touch feedback.","sidebar":"version-0.62/components"},"touchableopacity":{"id":"touchableopacity","title":"TouchableOpacity","description":"A wrapper for making views respond properly to touches. On press down, the opacity of the wrapped view is decreased, dimming it.","sidebar":"version-0.62/components"},"touchablewithoutfeedback":{"id":"touchablewithoutfeedback","title":"TouchableWithoutFeedback","description":"Do not use unless you have a very good reason. All elements that respond to press should have a visual feedback when touched.","sidebar":"version-0.62/components"},"transforms":{"id":"transforms","title":"Transforms","description":"Transforms are style properties that will help you modify the appearance and position of your components using 2D or 3D transformations. However, once you apply transforms, the layouts remain the same around the transformed component hence it might overlap with the nearby components. You can apply margin to the transformed component, the nearby components or padding to the container to prevent such overlaps.","sidebar":"version-0.62/api"},"troubleshooting":{"id":"troubleshooting","title":"Troubleshooting","description":"These are some common issues you may run into while setting up React Native. If you encounter something that is not listed here, try searching for the issue in GitHub.","sidebar":"version-0.62/docs"},"tutorial":{"id":"tutorial","title":"Learn the Basics","description":"React Native is like React, but it uses native components instead of web components as building blocks. So to understand the basic structure of a React Native app, you need to understand some of the basic React concepts, like JSX, components, state, and props. If you already know React, you still need to learn some React-Native-specific stuff, like the native components. This tutorial is aimed at all audiences, whether you have React experience or not."},"typescript":{"id":"typescript","title":"Using TypeScript with React Native","description":"TypeScript is a language which extends JavaScript by adding type definitions, much like Flow. While React Native is built in Flow, it supports both TypeScript and Flow by default.","sidebar":"version-0.62/docs"},"upgrading":{"id":"upgrading","title":"Upgrading to new React Native versions","description":"Upgrading to new versions of React Native will give you access to more APIs, views, developer tools and other goodies. Upgrading requires a small amount of effort, but we try to make it straightforward for you.","sidebar":"version-0.62/docs"},"usecolorscheme":{"id":"usecolorscheme","title":"useColorScheme","description":"The useColorScheme React hook provides and subscribes to color scheme updates from the Appearance module. The return value indicates the current user preferred color scheme. The value may be updated later, either through direct user action (e.g. theme selection in device settings) or on a schedule (e.g. light and dark themes that follow the day/night cycle).","sidebar":"version-0.62/api"},"usewindowdimensions":{"id":"usewindowdimensions","title":"useWindowDimensions","description":"useWindowDimensions automatically updates width and height values when screen size changes. You can get your application window\'s width and height like so:","sidebar":"version-0.62/api"},"using-a-listview":{"id":"using-a-listview","title":"Using List Views","description":"React Native provides a suite of components for presenting lists of data. Generally, you\'ll want to use either FlatList or SectionList.","sidebar":"version-0.62/docs"},"using-a-scrollview":{"id":"using-a-scrollview","title":"Using a ScrollView","description":"The ScrollView is a generic scrolling container that can contain multiple components and views. The scrollable items need not be homogeneous, and you can scroll both vertically and horizontally (by setting the horizontal property).","sidebar":"version-0.62/docs"},"vibration":{"id":"vibration","title":"Vibration","description":"Vibrates the device.","sidebar":"version-0.62/api"},"vibrationios":{"id":"vibrationios","title":"VibrationIOS","description":"NOTE: VibrationIOS is being deprecated. Use Vibration instead."},"view":{"id":"view","title":"View","description":"The most fundamental component for building a UI, View is a container that supports layout with flexbox, style, some touch handling, and accessibility controls. View maps directly to the native view equivalent on whatever platform React Native is running on, whether that is a UIView, `, android.view`, etc.","sidebar":"version-0.62/components"},"view-style-props":{"id":"view-style-props","title":"View Style Props","description":"Example","sidebar":"version-0.62/components"},"virtualizedlist":{"id":"virtualizedlist","title":"VirtualizedList","description":"Base implementation for the more convenient ` and  components, which are also better documented. In general, this should only really be used if you need more flexibility than FlatList` provides, e.g. for use with immutable data instead of plain arrays.","sidebar":"version-0.62/components"},"webview":{"id":"webview","title":"\ud83d\udea7 WebView","description":"Deprecated. Use react-native-community/react-native-webview instead."}}}')}}]);