"use strict";(self.webpackChunkreact_native_website=self.webpackChunkreact_native_website||[]).push([[89241],{35318:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return u}});var a=n(27378);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,d=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),h=p(n),u=l,N=h["".concat(d,".").concat(u)]||h[u]||k[u]||r;return n?a.createElement(N,i(i({ref:t},m),{},{components:n})):a.createElement(N,i({ref:t},m))}));function u(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=h;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},28543:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return h},contentTitle:function(){return u},metadata:function(){return N},toc:function(){return s},default:function(){return c}});var a=n(35318),l=Object.defineProperty,r=Object.defineProperties,i=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,d=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,m=(e,t,n)=>t in e?l(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,k=(e,t)=>{for(var n in t||(t={}))d.call(t,n)&&m(e,n,t[n]);if(o)for(var n of o(t))p.call(t,n)&&m(e,n,t[n]);return e};const h={id:"layout-props",title:"Layout Props"},u="Reference",N={unversionedId:"layout-props",id:"version-0.61/layout-props",title:"Layout Props",description:"Props",source:"@site/versioned_docs/version-0.61/layout-props.md",sourceDirName:".",slug:"/layout-props",permalink:"/docs/0.61/layout-props",editUrl:"https://github.com/facebook/react-native-website/blob/master/website/../docs/layout-props.md",tags:[],version:"0.61",lastUpdatedAt:1648760516,formattedLastUpdatedAt:"4/1/2022",frontMatter:{id:"layout-props",title:"Layout Props"},sidebar:"version-0.61/api",previous:{title:"Keyboard",permalink:"/docs/0.61/keyboard"},next:{title:"LayoutAnimation",permalink:"/docs/0.61/layoutanimation"}},s=[{value:"Props",id:"props",children:[{value:"<code>alignContent</code>",id:"aligncontent",children:[],level:3},{value:"<code>alignItems</code>",id:"alignitems",children:[],level:3},{value:"<code>alignSelf</code>",id:"alignself",children:[],level:3},{value:"<code>aspectRatio</code>",id:"aspectratio",children:[],level:3},{value:"<code>borderBottomWidth</code>",id:"borderbottomwidth",children:[],level:3},{value:"<code>borderEndWidth</code>",id:"borderendwidth",children:[],level:3},{value:"<code>borderLeftWidth</code>",id:"borderleftwidth",children:[],level:3},{value:"<code>borderRightWidth</code>",id:"borderrightwidth",children:[],level:3},{value:"<code>borderStartWidth</code>",id:"borderstartwidth",children:[],level:3},{value:"<code>borderTopWidth</code>",id:"bordertopwidth",children:[],level:3},{value:"<code>borderWidth</code>",id:"borderwidth",children:[],level:3},{value:"<code>bottom</code>",id:"bottom",children:[],level:3},{value:"<code>direction</code>",id:"direction",children:[],level:3},{value:"<code>display</code>",id:"display",children:[],level:3},{value:"<code>end</code>",id:"end",children:[],level:3},{value:"<code>flex</code>",id:"flex",children:[],level:3},{value:"<code>flexBasis</code>",id:"flexbasis",children:[],level:3},{value:"<code>flexDirection</code>",id:"flexdirection",children:[],level:3},{value:"<code>flexGrow</code>",id:"flexgrow",children:[],level:3},{value:"<code>flexShrink</code>",id:"flexshrink",children:[],level:3},{value:"<code>flexWrap</code>",id:"flexwrap",children:[],level:3},{value:"<code>height</code>",id:"height",children:[],level:3},{value:"<code>justifyContent</code>",id:"justifycontent",children:[],level:3},{value:"<code>left</code>",id:"left",children:[],level:3},{value:"<code>margin</code>",id:"margin",children:[],level:3},{value:"<code>marginBottom</code>",id:"marginbottom",children:[],level:3},{value:"<code>marginEnd</code>",id:"marginend",children:[],level:3},{value:"<code>marginHorizontal</code>",id:"marginhorizontal",children:[],level:3},{value:"<code>marginLeft</code>",id:"marginleft",children:[],level:3},{value:"<code>marginRight</code>",id:"marginright",children:[],level:3},{value:"<code>marginStart</code>",id:"marginstart",children:[],level:3},{value:"<code>marginTop</code>",id:"margintop",children:[],level:3},{value:"<code>marginVertical</code>",id:"marginvertical",children:[],level:3},{value:"<code>maxHeight</code>",id:"maxheight",children:[],level:3},{value:"<code>maxWidth</code>",id:"maxwidth",children:[],level:3},{value:"<code>minHeight</code>",id:"minheight",children:[],level:3},{value:"<code>minWidth</code>",id:"minwidth",children:[],level:3},{value:"<code>overflow</code>",id:"overflow",children:[],level:3},{value:"<code>padding</code>",id:"padding",children:[],level:3},{value:"<code>paddingBottom</code>",id:"paddingbottom",children:[],level:3},{value:"<code>paddingEnd</code>",id:"paddingend",children:[],level:3},{value:"<code>paddingHorizontal</code>",id:"paddinghorizontal",children:[],level:3},{value:"<code>paddingLeft</code>",id:"paddingleft",children:[],level:3},{value:"<code>paddingRight</code>",id:"paddingright",children:[],level:3},{value:"<code>paddingStart</code>",id:"paddingstart",children:[],level:3},{value:"<code>paddingTop</code>",id:"paddingtop",children:[],level:3},{value:"<code>paddingVertical</code>",id:"paddingvertical",children:[],level:3},{value:"<code>position</code>",id:"position",children:[],level:3},{value:"<code>right</code>",id:"right",children:[],level:3},{value:"<code>start</code>",id:"start",children:[],level:3},{value:"<code>top</code>",id:"top",children:[],level:3},{value:"<code>width</code>",id:"width",children:[],level:3},{value:"<code>zIndex</code>",id:"zindex",children:[],level:3}],level:2}],g={toc:s};function c(e){var t,n=e,{components:l}=n,m=((e,t)=>{var n={};for(var a in e)d.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&o)for(var a of o(e))t.indexOf(a)<0&&p.call(e,a)&&(n[a]=e[a]);return n})(n,["components"]);return(0,a.kt)("wrapper",(t=k(k({},g),m),r(t,i({components:l,mdxType:"MDXLayout"}))),(0,a.kt)("h1",k({},{id:"reference"}),"Reference"),(0,a.kt)("h2",k({},{id:"props"}),"Props"),(0,a.kt)("h3",k({},{id:"aligncontent"}),(0,a.kt)("inlineCode",{parentName:"h3"},"alignContent")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"alignContent")," controls how rows align in the cross direction, overriding the ",(0,a.kt)("inlineCode",{parentName:"p"},"alignContent")," of the parent. See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/align-content"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/align-content")," for more details."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"enum('flex-start', 'flex-end', 'center', 'stretch', 'space-between', 'space-around')"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"alignitems"}),(0,a.kt)("inlineCode",{parentName:"h3"},"alignItems")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"alignItems")," aligns children in the cross direction. For example, if children are flowing vertically, ",(0,a.kt)("inlineCode",{parentName:"p"},"alignItems")," controls how they align horizontally. It works like ",(0,a.kt)("inlineCode",{parentName:"p"},"align-items")," in CSS (default: stretch). See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/align-items"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/align-items")," for more details."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"enum('flex-start', 'flex-end', 'center', 'stretch', 'baseline')"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"alignself"}),(0,a.kt)("inlineCode",{parentName:"h3"},"alignSelf")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"alignSelf")," controls how a child aligns in the cross direction, overriding the ",(0,a.kt)("inlineCode",{parentName:"p"},"alignItems")," of the parent. It works like ",(0,a.kt)("inlineCode",{parentName:"p"},"align-self")," in CSS (default: auto). See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/align-self"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/align-self")," for more details."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"enum('auto', 'flex-start', 'flex-end', 'center', 'stretch', 'baseline')"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"aspectratio"}),(0,a.kt)("inlineCode",{parentName:"h3"},"aspectRatio")),(0,a.kt)("p",null,"Aspect ratio controls the size of the undefined dimension of a node. Aspect ratio is a non-standard property only available in React Native and not CSS."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"On a node with a set width/height aspect ratio controls the size of the unset dimension"),(0,a.kt)("li",{parentName:"ul"},"On a node with a set flex basis aspect ratio controls the size of the node in the cross axis if unset"),(0,a.kt)("li",{parentName:"ul"},"On a node with a measure function aspect ratio works as though the measure function measures the flex basis"),(0,a.kt)("li",{parentName:"ul"},"On a node with flex grow/shrink aspect ratio controls the size of the node in the cross axis if unset"),(0,a.kt)("li",{parentName:"ul"},"Aspect ratio takes min/max dimensions into account")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"borderbottomwidth"}),(0,a.kt)("inlineCode",{parentName:"h3"},"borderBottomWidth")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"borderBottomWidth")," works like ",(0,a.kt)("inlineCode",{parentName:"p"},"border-bottom-width")," in CSS. See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-width"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-width")," for more details."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"borderendwidth"}),(0,a.kt)("inlineCode",{parentName:"h3"},"borderEndWidth")),(0,a.kt)("p",null,"When direction is ",(0,a.kt)("inlineCode",{parentName:"p"},"ltr"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"borderEndWidth")," is equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"borderRightWidth"),". When direction is ",(0,a.kt)("inlineCode",{parentName:"p"},"rtl"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"borderEndWidth")," is equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"borderLeftWidth"),"."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"borderleftwidth"}),(0,a.kt)("inlineCode",{parentName:"h3"},"borderLeftWidth")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"borderLeftWidth")," works like ",(0,a.kt)("inlineCode",{parentName:"p"},"border-left-width")," in CSS. See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-width"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-width")," for more details."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"borderrightwidth"}),(0,a.kt)("inlineCode",{parentName:"h3"},"borderRightWidth")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"borderRightWidth")," works like ",(0,a.kt)("inlineCode",{parentName:"p"},"border-right-width")," in CSS. See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-width"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-width")," for more details."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"borderstartwidth"}),(0,a.kt)("inlineCode",{parentName:"h3"},"borderStartWidth")),(0,a.kt)("p",null,"When direction is ",(0,a.kt)("inlineCode",{parentName:"p"},"ltr"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"borderStartWidth")," is equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"borderLeftWidth"),". When direction is ",(0,a.kt)("inlineCode",{parentName:"p"},"rtl"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"borderStartWidth")," is equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"borderRightWidth"),"."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"bordertopwidth"}),(0,a.kt)("inlineCode",{parentName:"h3"},"borderTopWidth")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"borderTopWidth")," works like ",(0,a.kt)("inlineCode",{parentName:"p"},"border-top-width")," in CSS. See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-width"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-width")," for more details."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"borderwidth"}),(0,a.kt)("inlineCode",{parentName:"h3"},"borderWidth")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"borderWidth")," works like ",(0,a.kt)("inlineCode",{parentName:"p"},"border-width")," in CSS. See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/border-width"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/border-width")," for more details."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"bottom"}),(0,a.kt)("inlineCode",{parentName:"h3"},"bottom")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"bottom")," is the number of logical pixels to offset the bottom edge of this component."),(0,a.kt)("p",null,"It works similarly to ",(0,a.kt)("inlineCode",{parentName:"p"},"bottom")," in CSS, but in React Native you must use points or percentages. Ems and other units are not supported."),(0,a.kt)("p",null,"See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/bottom"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/bottom")," for more details of how ",(0,a.kt)("inlineCode",{parentName:"p"},"bottom")," affects layout."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"direction"}),(0,a.kt)("inlineCode",{parentName:"h3"},"direction")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"direction")," specifies the directional flow of the user interface. The default is ",(0,a.kt)("inlineCode",{parentName:"p"},"inherit"),", except for root node which will have value based on the current locale. See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://yogalayout.com/docs/layout-direction"}),"https://yogalayout.com/docs/layout-direction")," for more details."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Platform"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"enum('inherit', 'ltr', 'rtl')"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"iOS")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"display"}),(0,a.kt)("inlineCode",{parentName:"h3"},"display")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"display")," sets the display type of this component."),(0,a.kt)("p",null,"It works similarly to ",(0,a.kt)("inlineCode",{parentName:"p"},"display")," in CSS, but only support 'flex' and 'none'. 'flex' is the default."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"enum('none', 'flex')"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"end"}),(0,a.kt)("inlineCode",{parentName:"h3"},"end")),(0,a.kt)("p",null,"When the direction is ",(0,a.kt)("inlineCode",{parentName:"p"},"ltr"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"end")," is equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"right"),". When the direction is ",(0,a.kt)("inlineCode",{parentName:"p"},"rtl"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"end")," is equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"left"),"."),(0,a.kt)("p",null,"This style takes precedence over the ",(0,a.kt)("inlineCode",{parentName:"p"},"left")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"right")," styles."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"flex"}),(0,a.kt)("inlineCode",{parentName:"h3"},"flex")),(0,a.kt)("p",null,"In React Native ",(0,a.kt)("inlineCode",{parentName:"p"},"flex")," does not work the same way that it does in CSS. ",(0,a.kt)("inlineCode",{parentName:"p"},"flex")," is a number rather than a string, and it works according to the ",(0,a.kt)("a",k({parentName:"p"},{href:"https://github.com/facebook/yoga"}),"Yoga"),"."),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"flex")," is a positive number, it makes the component flexible and it will be sized proportional to its flex value. So a component with ",(0,a.kt)("inlineCode",{parentName:"p"},"flex")," set to 2 will take twice the space as a component with ",(0,a.kt)("inlineCode",{parentName:"p"},"flex")," set to 1. ",(0,a.kt)("inlineCode",{parentName:"p"},"flex: <positive number>")," equates to ",(0,a.kt)("inlineCode",{parentName:"p"},"flexGrow: <positive number>, flexShrink: 1, flexBasis: 0"),"."),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"flex")," is 0, the component is sized according to ",(0,a.kt)("inlineCode",{parentName:"p"},"width")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"height")," and it is inflexible."),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"flex")," is -1, the component is normally sized according ",(0,a.kt)("inlineCode",{parentName:"p"},"width")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"height"),". However, if there's not enough space, the component will shrink to its ",(0,a.kt)("inlineCode",{parentName:"p"},"minWidth")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"minHeight"),"."),(0,a.kt)("p",null,"flexGrow, flexShrink, and flexBasis work the same as in CSS."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"flexbasis"}),(0,a.kt)("inlineCode",{parentName:"h3"},"flexBasis")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"flexdirection"}),(0,a.kt)("inlineCode",{parentName:"h3"},"flexDirection")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"flexDirection")," controls which directions children of a container go. ",(0,a.kt)("inlineCode",{parentName:"p"},"row")," goes left to right, ",(0,a.kt)("inlineCode",{parentName:"p"},"column")," goes top to bottom, and you may be able to guess what the other two do. It works like ",(0,a.kt)("inlineCode",{parentName:"p"},"flex-direction")," in CSS, except the default is ",(0,a.kt)("inlineCode",{parentName:"p"},"column"),". See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction")," for more details."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"enum('row', 'row-reverse', 'column', 'column-reverse')"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"flexgrow"}),(0,a.kt)("inlineCode",{parentName:"h3"},"flexGrow")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"flexshrink"}),(0,a.kt)("inlineCode",{parentName:"h3"},"flexShrink")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"flexwrap"}),(0,a.kt)("inlineCode",{parentName:"h3"},"flexWrap")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"flexWrap")," controls whether children can wrap around after they hit the end of a flex container. It works like ",(0,a.kt)("inlineCode",{parentName:"p"},"flex-wrap")," in CSS (default: nowrap). See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap")," for more details. Note it does not work anymore with ",(0,a.kt)("inlineCode",{parentName:"p"},"alignItems: stretch")," (the default), so you may want to use ",(0,a.kt)("inlineCode",{parentName:"p"},"alignItems: flex-start")," for example (breaking change details: ",(0,a.kt)("a",k({parentName:"p"},{href:"https://github.com/facebook/react-native/releases/tag/v0.28.0"}),"https://github.com/facebook/react-native/releases/tag/v0.28.0"),")."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"enum('wrap', 'nowrap')"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"height"}),(0,a.kt)("inlineCode",{parentName:"h3"},"height")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"height")," sets the height of this component."),(0,a.kt)("p",null,"It works similarly to ",(0,a.kt)("inlineCode",{parentName:"p"},"height")," in CSS, but in React Native you must use points or percentages. Ems and other units are not supported. See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/height"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/height")," for more details."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"justifycontent"}),(0,a.kt)("inlineCode",{parentName:"h3"},"justifyContent")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"justifyContent")," aligns children in the main direction. For example, if children are flowing vertically, ",(0,a.kt)("inlineCode",{parentName:"p"},"justifyContent")," controls how they align vertically. It works like ",(0,a.kt)("inlineCode",{parentName:"p"},"justify-content")," in CSS (default: flex-start). See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content")," for more details."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"enum('flex-start', 'flex-end', 'center', 'space-between', 'space-around', 'space-evenly')"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"left"}),(0,a.kt)("inlineCode",{parentName:"h3"},"left")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"left")," is the number of logical pixels to offset the left edge of this component."),(0,a.kt)("p",null,"It works similarly to ",(0,a.kt)("inlineCode",{parentName:"p"},"left")," in CSS, but in React Native you must use points or percentages. Ems and other units are not supported."),(0,a.kt)("p",null,"See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/left"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/left")," for more details of how ",(0,a.kt)("inlineCode",{parentName:"p"},"left")," affects layout."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"margin"}),(0,a.kt)("inlineCode",{parentName:"h3"},"margin")),(0,a.kt)("p",null,"Setting ",(0,a.kt)("inlineCode",{parentName:"p"},"margin")," has the same effect as setting each of ",(0,a.kt)("inlineCode",{parentName:"p"},"marginTop"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"marginLeft"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"marginBottom"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"marginRight"),". See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/margin"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/margin")," for more details."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"marginbottom"}),(0,a.kt)("inlineCode",{parentName:"h3"},"marginBottom")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"marginBottom")," works like ",(0,a.kt)("inlineCode",{parentName:"p"},"margin-bottom")," in CSS. See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom")," for more details."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"marginend"}),(0,a.kt)("inlineCode",{parentName:"h3"},"marginEnd")),(0,a.kt)("p",null,"When direction is ",(0,a.kt)("inlineCode",{parentName:"p"},"ltr"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"marginEnd")," is equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"marginRight"),". When direction is ",(0,a.kt)("inlineCode",{parentName:"p"},"rtl"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"marginEnd")," is equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"marginLeft"),"."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"marginhorizontal"}),(0,a.kt)("inlineCode",{parentName:"h3"},"marginHorizontal")),(0,a.kt)("p",null,"Setting ",(0,a.kt)("inlineCode",{parentName:"p"},"marginHorizontal")," has the same effect as setting both ",(0,a.kt)("inlineCode",{parentName:"p"},"marginLeft")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"marginRight"),"."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"marginleft"}),(0,a.kt)("inlineCode",{parentName:"h3"},"marginLeft")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"marginLeft")," works like ",(0,a.kt)("inlineCode",{parentName:"p"},"margin-left")," in CSS. See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left")," for more details."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"marginright"}),(0,a.kt)("inlineCode",{parentName:"h3"},"marginRight")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"marginRight")," works like ",(0,a.kt)("inlineCode",{parentName:"p"},"margin-right")," in CSS. See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right")," for more details."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"marginstart"}),(0,a.kt)("inlineCode",{parentName:"h3"},"marginStart")),(0,a.kt)("p",null,"When direction is ",(0,a.kt)("inlineCode",{parentName:"p"},"ltr"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"marginStart")," is equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"marginLeft"),". When direction is ",(0,a.kt)("inlineCode",{parentName:"p"},"rtl"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"marginStart")," is equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"marginRight"),"."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"margintop"}),(0,a.kt)("inlineCode",{parentName:"h3"},"marginTop")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"marginTop")," works like ",(0,a.kt)("inlineCode",{parentName:"p"},"margin-top")," in CSS. See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top")," for more details."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"marginvertical"}),(0,a.kt)("inlineCode",{parentName:"h3"},"marginVertical")),(0,a.kt)("p",null,"Setting ",(0,a.kt)("inlineCode",{parentName:"p"},"marginVertical")," has the same effect as setting both ",(0,a.kt)("inlineCode",{parentName:"p"},"marginTop")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"marginBottom"),"."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"maxheight"}),(0,a.kt)("inlineCode",{parentName:"h3"},"maxHeight")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"maxHeight")," is the maximum height for this component, in logical pixels."),(0,a.kt)("p",null,"It works similarly to ",(0,a.kt)("inlineCode",{parentName:"p"},"max-height")," in CSS, but in React Native you must use points or percentages. Ems and other units are not supported."),(0,a.kt)("p",null,"See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/max-height"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/max-height")," for more details."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"maxwidth"}),(0,a.kt)("inlineCode",{parentName:"h3"},"maxWidth")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"maxWidth")," is the maximum width for this component, in logical pixels."),(0,a.kt)("p",null,"It works similarly to ",(0,a.kt)("inlineCode",{parentName:"p"},"max-width")," in CSS, but in React Native you must use points or percentages. Ems and other units are not supported."),(0,a.kt)("p",null,"See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/max-width"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/max-width")," for more details."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"minheight"}),(0,a.kt)("inlineCode",{parentName:"h3"},"minHeight")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"minHeight")," is the minimum height for this component, in logical pixels."),(0,a.kt)("p",null,"It works similarly to ",(0,a.kt)("inlineCode",{parentName:"p"},"min-height")," in CSS, but in React Native you must use points or percentages. Ems and other units are not supported."),(0,a.kt)("p",null,"See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/min-height"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/min-height")," for more details."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"minwidth"}),(0,a.kt)("inlineCode",{parentName:"h3"},"minWidth")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"minWidth")," is the minimum width for this component, in logical pixels."),(0,a.kt)("p",null,"It works similarly to ",(0,a.kt)("inlineCode",{parentName:"p"},"min-width")," in CSS, but in React Native you must use points or percentages. Ems and other units are not supported."),(0,a.kt)("p",null,"See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/min-width"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/min-width")," for more details."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"overflow"}),(0,a.kt)("inlineCode",{parentName:"h3"},"overflow")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"overflow")," controls how children are measured and displayed. ",(0,a.kt)("inlineCode",{parentName:"p"},"overflow: hidden")," causes views to be clipped while ",(0,a.kt)("inlineCode",{parentName:"p"},"overflow: scroll")," causes views to be measured independently of their parents main axis. It works like ",(0,a.kt)("inlineCode",{parentName:"p"},"overflow")," in CSS (default: visible). See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en/docs/Web/CSS/overflow"}),"https://developer.mozilla.org/en/docs/Web/CSS/overflow")," for more details."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"enum('visible', 'hidden', 'scroll')"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"padding"}),(0,a.kt)("inlineCode",{parentName:"h3"},"padding")),(0,a.kt)("p",null,"Setting ",(0,a.kt)("inlineCode",{parentName:"p"},"padding")," has the same effect as setting each of ",(0,a.kt)("inlineCode",{parentName:"p"},"paddingTop"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"paddingBottom"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"paddingLeft"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"paddingRight"),". See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/padding"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/padding")," for more details."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"paddingbottom"}),(0,a.kt)("inlineCode",{parentName:"h3"},"paddingBottom")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"paddingBottom")," works like ",(0,a.kt)("inlineCode",{parentName:"p"},"padding-bottom")," in CSS. See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom")," for more details."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"paddingend"}),(0,a.kt)("inlineCode",{parentName:"h3"},"paddingEnd")),(0,a.kt)("p",null,"When direction is ",(0,a.kt)("inlineCode",{parentName:"p"},"ltr"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"paddingEnd")," is equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"paddingRight"),". When direction is ",(0,a.kt)("inlineCode",{parentName:"p"},"rtl"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"paddingEnd")," is equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"paddingLeft"),"."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"paddinghorizontal"}),(0,a.kt)("inlineCode",{parentName:"h3"},"paddingHorizontal")),(0,a.kt)("p",null,"Setting ",(0,a.kt)("inlineCode",{parentName:"p"},"paddingHorizontal")," is like setting both of ",(0,a.kt)("inlineCode",{parentName:"p"},"paddingLeft")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"paddingRight"),"."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"paddingleft"}),(0,a.kt)("inlineCode",{parentName:"h3"},"paddingLeft")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"paddingLeft")," works like ",(0,a.kt)("inlineCode",{parentName:"p"},"padding-left")," in CSS. See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left")," for more details."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"paddingright"}),(0,a.kt)("inlineCode",{parentName:"h3"},"paddingRight")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"paddingRight")," works like ",(0,a.kt)("inlineCode",{parentName:"p"},"padding-right")," in CSS. See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/padding-right"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/padding-right")," for more details."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"paddingstart"}),(0,a.kt)("inlineCode",{parentName:"h3"},"paddingStart")),(0,a.kt)("p",null,"When direction is ",(0,a.kt)("inlineCode",{parentName:"p"},"ltr"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"paddingStart")," is equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"paddingLeft"),". When direction is ",(0,a.kt)("inlineCode",{parentName:"p"},"rtl"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"paddingStart")," is equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"paddingRight"),"."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"paddingtop"}),(0,a.kt)("inlineCode",{parentName:"h3"},"paddingTop")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"paddingTop")," works like ",(0,a.kt)("inlineCode",{parentName:"p"},"padding-top")," in CSS. See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/padding-top"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/padding-top")," for more details."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, ,string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"paddingvertical"}),(0,a.kt)("inlineCode",{parentName:"h3"},"paddingVertical")),(0,a.kt)("p",null,"Setting ",(0,a.kt)("inlineCode",{parentName:"p"},"paddingVertical")," is like setting both of ",(0,a.kt)("inlineCode",{parentName:"p"},"paddingTop")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"paddingBottom"),"."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"position"}),(0,a.kt)("inlineCode",{parentName:"h3"},"position")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"position")," in React Native is similar to regular CSS, but everything is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"relative")," by default, so ",(0,a.kt)("inlineCode",{parentName:"p"},"absolute")," positioning is always relative to the parent."),(0,a.kt)("p",null,"If you want to position a child using specific numbers of logical pixels relative to its parent, set the child to have ",(0,a.kt)("inlineCode",{parentName:"p"},"absolute")," position."),(0,a.kt)("p",null,"If you want to position a child relative to something that is not its parent, don't use styles for that. Use the component tree."),(0,a.kt)("p",null,"See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://github.com/facebook/yoga"}),"https://github.com/facebook/yoga")," for more details on how ",(0,a.kt)("inlineCode",{parentName:"p"},"position")," differs between React Native and CSS."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"enum('absolute', 'relative')"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"right"}),(0,a.kt)("inlineCode",{parentName:"h3"},"right")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"right")," is the number of logical pixels to offset the right edge of this component."),(0,a.kt)("p",null,"It works similarly to ",(0,a.kt)("inlineCode",{parentName:"p"},"right")," in CSS, but in React Native you must use points or percentages. Ems and other units are not supported."),(0,a.kt)("p",null,"See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/right"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/right")," for more details of how ",(0,a.kt)("inlineCode",{parentName:"p"},"right")," affects layout."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"start"}),(0,a.kt)("inlineCode",{parentName:"h3"},"start")),(0,a.kt)("p",null,"When the direction is ",(0,a.kt)("inlineCode",{parentName:"p"},"ltr"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"start")," is equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"left"),". When the direction is ",(0,a.kt)("inlineCode",{parentName:"p"},"rtl"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"start")," is equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"right"),"."),(0,a.kt)("p",null,"This style takes precedence over the ",(0,a.kt)("inlineCode",{parentName:"p"},"left"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"right"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"end")," styles."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"top"}),(0,a.kt)("inlineCode",{parentName:"h3"},"top")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"top")," is the number of logical pixels to offset the top edge of this component."),(0,a.kt)("p",null,"It works similarly to ",(0,a.kt)("inlineCode",{parentName:"p"},"top")," in CSS, but in React Native you must use points or percentages. Ems and other units are not supported."),(0,a.kt)("p",null,"See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/top"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/top")," for more details of how ",(0,a.kt)("inlineCode",{parentName:"p"},"top")," affects layout."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"width"}),(0,a.kt)("inlineCode",{parentName:"h3"},"width")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"width")," sets the width of this component."),(0,a.kt)("p",null,"It works similarly to ",(0,a.kt)("inlineCode",{parentName:"p"},"width")," in CSS, but in React Native you must use points or percentages. Ems and other units are not supported. See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/width"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/width")," for more details."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number, string"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",k({},{id:"zindex"}),(0,a.kt)("inlineCode",{parentName:"h3"},"zIndex")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"zIndex")," controls which components display on top of others. Normally, you don't use ",(0,a.kt)("inlineCode",{parentName:"p"},"zIndex"),". Components render according to their order in the document tree, so later components draw over earlier ones. ",(0,a.kt)("inlineCode",{parentName:"p"},"zIndex")," may be useful if you have animations or custom modal interfaces where you don't want this behavior."),(0,a.kt)("p",null,"It works like the CSS ",(0,a.kt)("inlineCode",{parentName:"p"},"z-index")," property - components with a larger ",(0,a.kt)("inlineCode",{parentName:"p"},"zIndex")," will render on top. Think of the z-direction like it's pointing from the phone into your eyeball. See ",(0,a.kt)("a",k({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/z-index"}),"https://developer.mozilla.org/en-US/docs/Web/CSS/z-index")," for more details."),(0,a.kt)("p",null,"On iOS, ",(0,a.kt)("inlineCode",{parentName:"p"},"zIndex")," may require ",(0,a.kt)("inlineCode",{parentName:"p"},"View"),"s to be siblings of each other for it to work as expected."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"number"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null))}c.isMDXComponent=!0}}]);