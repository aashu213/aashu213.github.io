"use strict";(self.webpackChunkreact_native_website=self.webpackChunkreact_native_website||[]).push([[4175],{35318:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return b}});var r=n(27378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),p=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),b=a,m=u["".concat(d,".").concat(b)]||u[b]||s[b]||o;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},79531:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return b},metadata:function(){return m},toc:function(){return h},default:function(){return k}});var r=n(35318),a=Object.defineProperty,o=Object.defineProperties,i=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,d=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,c=(e,t,n)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,s=(e,t)=>{for(var n in t||(t={}))d.call(t,n)&&c(e,n,t[n]);if(l)for(var n of l(t))p.call(t,n)&&c(e,n,t[n]);return e};const u={id:"keyboardavoidingview",title:"KeyboardAvoidingView"},b=void 0,m={unversionedId:"keyboardavoidingview",id:"version-0.68/keyboardavoidingview",title:"KeyboardAvoidingView",description:"It is a component to solve the common problem of views that need to move out of the way of the virtual keyboard. It can automatically adjust either its height, position, or bottom padding based on the keyboard height.",source:"@site/versioned_docs/version-0.68/keyboardavoidingview.md",sourceDirName:".",slug:"/keyboardavoidingview",permalink:"/docs/keyboardavoidingview",editUrl:"https://github.com/facebook/react-native-website/blob/master/website/../docs/keyboardavoidingview.md",tags:[],version:"0.68",lastUpdatedAt:1648760516,formattedLastUpdatedAt:"4/1/2022",frontMatter:{id:"keyboardavoidingview",title:"KeyboardAvoidingView"}},h=[{value:"Example",id:"example",children:[],level:2},{value:"Props",id:"props",children:[{value:"View Props",id:"view-props",children:[],level:3},{value:"<code>behavior</code>",id:"behavior",children:[],level:3},{value:"<code>contentContainerStyle</code>",id:"contentcontainerstyle",children:[],level:3},{value:"<code>enabled</code>",id:"enabled",children:[],level:3},{value:"<code>keyboardVerticalOffset</code>",id:"keyboardverticaloffset",children:[],level:3}],level:2}],y={toc:h};function k(e){var t,n=e,{components:a}=n,c=((e,t)=>{var n={};for(var r in e)d.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&l)for(var r of l(e))t.indexOf(r)<0&&p.call(e,r)&&(n[r]=e[r]);return n})(n,["components"]);return(0,r.kt)("wrapper",(t=s(s({},y),c),o(t,i({components:a,mdxType:"MDXLayout"}))),(0,r.kt)("p",null,"It is a component to solve the common problem of views that need to move out of the way of the virtual keyboard. It can automatically adjust either its height, position, or bottom padding based on the keyboard height."),(0,r.kt)("h2",s({},{id:"example"}),"Example"),(0,r.kt)("div",s({},{className:"snack-player","data-snack-name":"KeyboardAvoidingView","data-snack-description":"Example usage","data-snack-code":"import%20React%20from%20'react'%3B%0Aimport%20%7B%20View%2C%20KeyboardAvoidingView%2C%20TextInput%2C%20StyleSheet%2C%20Text%2C%20Platform%2C%20TouchableWithoutFeedback%2C%20Button%2C%20Keyboard%20%20%7D%20from%20'react-native'%3B%0A%0Aconst%20KeyboardAvoidingComponent%20%3D%20()%20%3D%3E%20%7B%0A%20%20return%20(%0A%20%20%20%20%3CKeyboardAvoidingView%0A%20%20%20%20%20%20behavior%3D%7BPlatform.OS%20%3D%3D%3D%20%22ios%22%20%3F%20%22padding%22%20%3A%20%22height%22%7D%0A%20%20%20%20%20%20style%3D%7Bstyles.container%7D%0A%20%20%20%20%3E%0A%20%20%20%20%20%20%3CTouchableWithoutFeedback%20onPress%3D%7BKeyboard.dismiss%7D%3E%0A%20%20%20%20%20%20%20%20%3CView%20style%3D%7Bstyles.inner%7D%3E%0A%20%20%20%20%20%20%20%20%20%20%3CText%20style%3D%7Bstyles.header%7D%3EHeader%3C%2FText%3E%0A%20%20%20%20%20%20%20%20%20%20%3CTextInput%20placeholder%3D%22Username%22%20style%3D%7Bstyles.textInput%7D%20%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%3CView%20style%3D%7Bstyles.btnContainer%7D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3CButton%20title%3D%22Submit%22%20onPress%3D%7B()%20%3D%3E%20null%7D%20%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%3C%2FView%3E%0A%20%20%20%20%20%20%20%20%3C%2FView%3E%0A%20%20%20%20%20%20%3C%2FTouchableWithoutFeedback%3E%0A%20%20%20%20%3C%2FKeyboardAvoidingView%3E%0A%20%20)%3B%0A%7D%3B%0A%0Aconst%20styles%20%3D%20StyleSheet.create(%7B%0A%20%20container%3A%20%7B%0A%20%20%20%20flex%3A%201%0A%20%20%7D%2C%0A%20%20inner%3A%20%7B%0A%20%20%20%20padding%3A%2024%2C%0A%20%20%20%20flex%3A%201%2C%0A%20%20%20%20justifyContent%3A%20%22space-around%22%0A%20%20%7D%2C%0A%20%20header%3A%20%7B%0A%20%20%20%20fontSize%3A%2036%2C%0A%20%20%20%20marginBottom%3A%2048%0A%20%20%7D%2C%0A%20%20textInput%3A%20%7B%0A%20%20%20%20height%3A%2040%2C%0A%20%20%20%20borderColor%3A%20%22%23000000%22%2C%0A%20%20%20%20borderBottomWidth%3A%201%2C%0A%20%20%20%20marginBottom%3A%2036%0A%20%20%7D%2C%0A%20%20btnContainer%3A%20%7B%0A%20%20%20%20backgroundColor%3A%20%22white%22%2C%0A%20%20%20%20marginTop%3A%2012%0A%20%20%7D%0A%7D)%3B%0A%0Aexport%20default%20KeyboardAvoidingComponent%3B","data-snack-dependencies":"","data-snack-platform":"web","data-snack-supported-platforms":"android,ios","data-snack-theme":"light","data-snack-preview":"true","data-snack-loading":"lazy"})),(0,r.kt)("hr",null),(0,r.kt)("h1",s({},{id:"reference"}),"Reference"),(0,r.kt)("h2",s({},{id:"props"}),"Props"),(0,r.kt)("h3",s({},{id:"view-props"}),(0,r.kt)("a",s({parentName:"h3"},{href:"/docs/view#props"}),"View Props")),(0,r.kt)("p",null,"Inherits ",(0,r.kt)("a",s({parentName:"p"},{href:"/docs/view#props"}),"View Props"),"."),(0,r.kt)("hr",null),(0,r.kt)("h3",s({},{id:"behavior"}),(0,r.kt)("inlineCode",{parentName:"h3"},"behavior")),(0,r.kt)("p",null,"Specify how to react to the presence of the keyboard."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Android and iOS both interact with this prop differently. On both iOS and Android, setting ",(0,r.kt)("inlineCode",{parentName:"p"},"behavior")," is recommended.")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),"enum(",(0,r.kt)("inlineCode",{parentName:"td"},"'height'"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"'position'"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"'padding'"),")")))),(0,r.kt)("hr",null),(0,r.kt)("h3",s({},{id:"contentcontainerstyle"}),(0,r.kt)("inlineCode",{parentName:"h3"},"contentContainerStyle")),(0,r.kt)("p",null,"The style of the content container (View) when behavior is ",(0,r.kt)("inlineCode",{parentName:"p"},"'position'"),"."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("a",s({parentName:"td"},{href:"/docs/view-style-props"}),"View Style"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",s({},{id:"enabled"}),(0,r.kt)("inlineCode",{parentName:"h3"},"enabled")),(0,r.kt)("p",null,"Enabled or disabled KeyboardAvoidingView."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Type"),(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),"boolean"),(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"true"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",s({},{id:"keyboardverticaloffset"}),(0,r.kt)("inlineCode",{parentName:"h3"},"keyboardVerticalOffset")),(0,r.kt)("p",null,"This is the distance between the top of the user screen and the react native view, may be non-zero in some use cases."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Type"),(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),"number"),(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"0"))))))}k.isMDXComponent=!0}}]);