"use strict";(self.webpackChunkreact_native_website=self.webpackChunkreact_native_website||[]).push([[57133],{35318:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var r=n(27378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),u=a,k=d["".concat(s,".").concat(u)]||d[u]||m[u]||o;return n?r.createElement(k,i(i({ref:t},c),{},{components:n})):r.createElement(k,i({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},43719:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return d},contentTitle:function(){return u},metadata:function(){return k},toc:function(){return f},default:function(){return b}});var r=n(35318),a=Object.defineProperty,o=Object.defineProperties,i=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,c=(e,t,n)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,m=(e,t)=>{for(var n in t||(t={}))s.call(t,n)&&c(e,n,t[n]);if(l)for(var n of l(t))p.call(t,n)&&c(e,n,t[n]);return e};const d={id:"maskedviewios",title:"\ud83d\udea7 MaskedViewIOS"},u=void 0,k={unversionedId:"maskedviewios",id:"version-0.61/maskedviewios",title:"\ud83d\udea7 MaskedViewIOS",description:"Deprecated. Use @react-native-community/masked-view instead.",source:"@site/versioned_docs/version-0.61/maskedviewios.md",sourceDirName:".",slug:"/maskedviewios",permalink:"/docs/0.61/maskedviewios",editUrl:"https://github.com/facebook/react-native-website/blob/master/website/../docs/maskedviewios.md",tags:[],version:"0.61",lastUpdatedAt:1648760516,formattedLastUpdatedAt:"4/1/2022",frontMatter:{id:"maskedviewios",title:"\ud83d\udea7 MaskedViewIOS"},sidebar:"version-0.61/components",previous:{title:"KeyboardAvoidingView",permalink:"/docs/0.61/keyboardavoidingview"},next:{title:"Modal",permalink:"/docs/0.61/modal"}},f=[{value:"Example",id:"example",children:[{value:"Props",id:"props",children:[],level:3}],level:2},{value:"Props",id:"props-1",children:[{value:"<code>maskElement</code>",id:"maskelement",children:[],level:3}],level:2}],h={toc:f};function b(e){var t,n=e,{components:a}=n,c=((e,t)=>{var n={};for(var r in e)s.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&l)for(var r of l(e))t.indexOf(r)<0&&p.call(e,r)&&(n[r]=e[r]);return n})(n,["components"]);return(0,r.kt)("wrapper",(t=m(m({},h),c),o(t,i({components:a,mdxType:"MDXLayout"}))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Deprecated.")," Use ",(0,r.kt)("a",m({parentName:"p"},{href:"https://github.com/react-native-community/react-native-masked-view"}),"@react-native-community/masked-view")," instead.")),(0,r.kt)("p",null,"Renders the child view with a mask specified in the ",(0,r.kt)("inlineCode",{parentName:"p"},"maskElement")," prop."),(0,r.kt)("h2",m({},{id:"example"}),"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",m({parentName:"pre"},{className:"language-jsx"}),"import React from 'react';\nimport { MaskedViewIOS, Text, View } from 'react-native';\n\nclass MyMaskedView extends React.Component {\n  render() {\n    return (\n      // Determines shape of the mask\n      <MaskedViewIOS\n        style={{ flex: 1, flexDirection: 'row', height: '100%' }}\n        maskElement={\n          <View\n            style={{\n              // Transparent background because mask is based off alpha channel.\n              backgroundColor: 'transparent',\n              flex: 1,\n              justifyContent: 'center',\n              alignItems: 'center'\n            }}>\n            <Text\n              style={{\n                fontSize: 60,\n                color: 'black',\n                fontWeight: 'bold'\n              }}>\n              Basic Mask\n            </Text>\n          </View>\n        }>\n        {/* Shows behind the mask, you can put anything here, such as an image */}\n        <View\n          style={{\n            flex: 1,\n            height: '100%',\n            backgroundColor: '#324376'\n          }}\n        />\n        <View\n          style={{\n            flex: 1,\n            height: '100%',\n            backgroundColor: '#F5DD90'\n          }}\n        />\n        <View\n          style={{\n            flex: 1,\n            height: '100%',\n            backgroundColor: '#F76C5E'\n          }}\n        />\n      </MaskedViewIOS>\n    );\n  }\n}\n")),(0,r.kt)("p",null,"The following image demonstrates that you can put almost anything behind the mask. The three examples shown are masked ",(0,r.kt)("inlineCode",{parentName:"p"},"<View>"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"<Text>"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"<Image>"),"."),(0,r.kt)("center",null,(0,r.kt)("img",{src:"/docs/assets/MaskedViewIOS/example.png",width:"200"})),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"The alpha channel of the view rendered by the ",(0,r.kt)("inlineCode",{parentName:"strong"},"maskElement")," prop determines how much of the view's content and background shows through.")," Fully or partially opaque pixels allow the underlying content to show through but fully transparent pixels block that content."),(0,r.kt)("h3",m({},{id:"props"}),"Props"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",m({parentName:"li"},{href:"/docs/0.61/view#props"}),"View props..."))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",m({parentName:"li"},{href:"/docs/0.61/maskedviewios#maskelement"}),(0,r.kt)("inlineCode",{parentName:"a"},"maskElement")))),(0,r.kt)("hr",null),(0,r.kt)("h1",m({},{id:"reference"}),"Reference"),(0,r.kt)("h2",m({},{id:"props-1"}),"Props"),(0,r.kt)("h3",m({},{id:"maskelement"}),(0,r.kt)("inlineCode",{parentName:"h3"},"maskElement")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",m({parentName:"tr"},{align:null}),"Type"),(0,r.kt)("th",m({parentName:"tr"},{align:null}),"Required"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",m({parentName:"tr"},{align:null}),"element"),(0,r.kt)("td",m({parentName:"tr"},{align:null}),"Yes")))))}b.isMDXComponent=!0}}]);