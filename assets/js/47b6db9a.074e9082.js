"use strict";(self.webpackChunkreact_native_website=self.webpackChunkreact_native_website||[]).push([[8310],{5318:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),d=s(n),m=i,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||l;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,o=new Array(l);o[0]=d;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r.mdxType="string"==typeof e?e:i,o[1]=r;for(var s=2;s<l;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5785:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return d},contentTitle:function(){return m},metadata:function(){return h},toc:function(){return f},default:function(){return y}});var a=n(5318),i=Object.defineProperty,l=Object.defineProperties,o=Object.getOwnPropertyDescriptors,r=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,c=(e,t,n)=>t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,u=(e,t)=>{for(var n in t||(t={}))p.call(t,n)&&c(e,n,t[n]);if(r)for(var n of r(t))s.call(t,n)&&c(e,n,t[n]);return e};const d={id:"Katonic-Automated-Pipeline-Deplyment",title:"Katonic Automated Pipeline Deplyment"},m=void 0,h={unversionedId:"Katonic-Automated-Pipeline-Deplyment",id:"Katonic-Automated-Pipeline-Deplyment",title:"Katonic Automated Pipeline Deplyment",description:"Kale",source:"@site/../docs/Katonic-Automated-Pipeline-Deplyment.md",sourceDirName:".",slug:"/Katonic-Automated-Pipeline-Deplyment",permalink:"/next/Katonic-Automated-Pipeline-Deplyment",editUrl:"https://github.com/facebook/react-native-website/blob/master/website/../docs/Katonic-Automated-Pipeline-Deplyment.md",tags:[],version:"current",lastUpdatedAt:1649189812,formattedLastUpdatedAt:"4/6/2022",frontMatter:{id:"Katonic-Automated-Pipeline-Deplyment",title:"Katonic Automated Pipeline Deplyment"},sidebar:"User Guide",previous:{title:"Pipelines",permalink:"/next/Pipelines"},next:{title:"Katonic Studio",permalink:"/next/Katonic-Studio"}},f=[],g={toc:f};function y(e){var t,i=e,{components:c}=i,d=((e,t)=>{var n={};for(var a in e)p.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&r)for(var a of r(e))t.indexOf(a)<0&&s.call(e,a)&&(n[a]=e[a]);return n})(i,["components"]);return(0,a.kt)("wrapper",(t=u(u({},g),d),l(t,o({components:c,mdxType:"MDXLayout"}))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Kale")),(0,a.kt)("p",null,"The Kale EKF component simplifies the use of Kubeflow, giving data scientists the tools they need to orchestrate end-to-end ML workflows. Kale provides both an SDK and a GUI in the form of a JupyterLab extension.\nThe SDK can be used to orchestrate workflows from any repository of Python code. The aim of the Kale SDK is to allow you to write plain Python code and then be able to convert it into fully reproducible Kubeflow pipelines without making any changes to the original source code.\nThe JupyterLab extension provides a convenient GUI for workflow orchestration from within Jupyter Notebooks.\nKale enables you to run hyperparameter tuning jobs, thanks to its integration with Katib, serve models by spawning KFServing InferenceServices, and execute AutoML configurations using AutoSklearn. Finally, Kale allows you to explore the lineage of the trained models by logging MLMD Artifacts and make the whole process reproducible using Rok snapshots."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Overview"),"\n\u2022\tJupyterLab Extension\n\u2022\tKale SDK\n\u2022\tKatib Integration\n\u2022\tKFServing Integration\n\u2022\tDistributed Training\n\u2022\tKale APIs"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"JupyterLab Extension")),(0,a.kt)("p",null,"The Kale component of MiniKF and Arrikto Enterprise Kubeflow (EKF), allows you to operationalize your machine learning workflows as pipeline runs on Kubernetes deployments. Kale is provided as both a Python SDK and a JupyterLab extension.\nIn this section, we will describe how to use the Kale user interface (UI) from a Jupyter Notebook. The Kale UI enables you to annotate cells in a Notebook to define the steps of a machine learning pipeline. Using these annotations, Kale adapts your Python code so that the steps of your pipeline can be containerized and run on Kubernetes clusters."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Overview"),"\n\u2022\tAnnotate Cells\n\u2022\tKale Notebook Cell Types\n\u2022\tRun a Pipeline"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Annotate Cells")),(0,a.kt)("p",null,"In this section, we describe the basics for annotating notebook cells to define a Kubeflow pipeline using Kale.\nAnnotate One Cell"),(0,a.kt)("p",null,"To annotate a cell:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Ensure the Kale Deployment Panel is enabled.\n",(0,a.kt)("img",{alt:"Untitled",src:n(2191).Z}))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Click the pencil icon.\n",(0,a.kt)("img",{alt:"Untitled",src:n(3521).Z}))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Select the preferred cell type from the pull-down menu.\n",(0,a.kt)("img",{alt:"Untitled",src:n(6215).Z})))),(0,a.kt)("p",null,"NOTE\nSome cell types support multiple parameters.\n",(0,a.kt)("img",{alt:"Untitled",src:n(1416).Z})),(0,a.kt)("p",null,"Annotate Multiple Cells"),(0,a.kt)("p",null,"You may annotate multiple cells with the same cell type.\nKale will group consecutive cells together using the annotation applied to the first cell in the sequence. For example, in the figure below, Kale has grouped three cells together as a single pipeline step and indicated this with a vertical line matching the color of the step name.\nIf you need to annotate multiple cells in different sections of your notebook with the same cell type, annotate each cell separately following the annotation instructions for that cell type.\n",(0,a.kt)("img",{alt:"Untitled",src:n(312).Z})," "),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Kale Notebook Cell Types")),(0,a.kt)("p",null,"To create a Kubeflow Pipeline (KFP) from a Jupyter Notebook using Kale, annotate the cells of your notebook selecting from six Kale cell types. Some of the cell types require a small number of parameters.\nKale uses the annotations you supply to define a Kubeflow pipeline. Each step of the pipeline will run in its own container in a Kubernetes deployment. The annotations you apply to cells in your notebook enable Kale to manage dependencies for each step and marshal data correctly as inputs and outputs for each step of a pipeline. See below for the list of cell types and a brief summary of each."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Cell type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Cell should contain"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Imports"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Blocks of code that import other modules your machine learning pipeline requires and may be needed by more than one step.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"-----------"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"----------------------------------------------------------------------------------------------------------------------------")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Functions"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Functions used later in your machine learning pipeline; global variable definitions (other than pipeline parameters); and code that initializes lists,")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null})),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"dictionaries, objects, and other values used throughout your pipeline.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"---------"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"------------------------------------------------------------------------------------------------------------------------------")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Pipeline Parameters"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Definitions for global variables used to parameterize your machine learning workflow. These are often training hyperparameters.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"---------"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"------------------------------------------------------------------------------------------------------------------------------")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Pipeline Metrics"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Lines of code that log or print values used to measure the success of your model.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"---------"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"------------------------------------------------------------------------------------------------------------------------------")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Pipeline Step"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Code that implements the core logic of a discrete step in your workflow.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"---------"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"------------------------------------------------------------------------------------------------------------------------------")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Skip Cell"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Any code that you want Kale to ignore.")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Imports")," "),(0,a.kt)("p",null,"Annotate notebook cells with the label Imports to identify blocks of code that import other modules your machine learning pipeline requires.\nPurpose"),(0,a.kt)("p",null,"Imports cells help Kale identify all dependencies for pipeline steps. Kale prepends the code in Imports cells to the code specific to a pipeline step in the execution environment it creates for that step. See How Kale Creates a Pipeline Step for more detail."),(0,a.kt)("p",null,"Annotate Imports Cells\nTo annotate imports, edit the first cell containing import statements by clicking the pencil icon in the upper right corner and select ",(0,a.kt)("strong",{parentName:"p"},"Cell type > Imports."),"\n",(0,a.kt)("img",{alt:"Untitled",src:n(5021).Z})," "),(0,a.kt)("p",null,"NOTE\nIf you don\u2019t see the pencil icon, please enable Kale from the ",(0,a.kt)("strong",{parentName:"p"},"Kale Deployment Panel.")),(0,a.kt)("p",null,"Functions Cells"),(0,a.kt)("p",null,"Annotate notebook cells with the label Functions to identify blocks of code containing:\n\u2022\tFunctions used later in your machine learning pipeline.\n\u2022\tGlobal variable definitions (other than pipeline parameters) and code that initializes lists, dictionaries, objects, and other values used throughout your pipeline."),(0,a.kt)("p",null,"NOTE\nThough pipeline parameters are often written as global variables, you should annotate pipeline parameters using the Pipeline Parameters label. This will enable Kale to configure the Kubeflow pipeline it defines with the appropriate input parameters."),(0,a.kt)("p",null,"Purpose"),(0,a.kt)("p",null,"Functions cells help Kale identify all dependencies for pipeline steps. Kale creates pipeline steps by prepending Imports cells followed by Functions cells to the code specific to a pipeline step in the execution environment it creates for that step. See How Kale Creates a Pipeline Step for more detail."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Annotate Functions Cells")),(0,a.kt)("p",null,"To identify functions, global variable declarations, and initialization code, edit the first cell in a block containing this code by clicking the pencil icon in the upper right corner and select Cell type > Functions."),(0,a.kt)("p",null,"NOTE\nIf you don\u2019t see the pencil icon, please enable Kale from the Kale Deployment Panel."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Untitled",src:n(8547).Z})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Pipeline Parameters Cells")),(0,a.kt)("p",null,"Annotate notebook cells as Pipeline Parameters to identify blocks of code that define global variables used as inputs to specify some controls on the operation of a machine learning pipeline. These should be values that you might experiment with as you evaluate the relative performance of a pipeline run with different settings.\nPurpose\nKale uses the values in Pipeline Parameters cells to define Kubeflow Pipeline (KFP) PipelineParam objects and initializes the KF Pipeline with these parameters. KFP includes pipeline parameters values in the artifacts it creates for pipeline runs to facilitate review of results from experiments comparing multiple runs of a pipeline.\nAnnotate Pipeline Parameters Cells\nTo annotate pipeline parameters, edit the first cell containing pipeline parameters by clicking the pencil icon in the upper right corner and select Cell type > Pipeline Parameters."),(0,a.kt)("p",null,"NOTE\nIf you don\u2019t see the pencil icon, please enable Kale from the Kale Deployment Panel."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Untitled",src:n(8943).Z})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Pipeline Step Cells")),(0,a.kt)("p",null,"Annotate notebook cells with the label Pipeline Step to identify code that implements one of the main components or tasks of a machine learning workflow. A pipeline step typically represents a milestone in data preparation, training, evaluation, tuning, prediction or other phases of a workflow.\nKale creates pipeline steps by prepending Imports cells followed by Functions cells to cells annotated for a particular Pipeline Step. These cells together comprise the code Kale uses in the execution environment it creates for a pipeline step. See How Kale Creates a Pipeline Step for more detail.\nAnnotate Pipeline Step Cells"),(0,a.kt)("p",null,"To identify code that implements a step in a machine learning workflow:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Edit the first cell containing this code by clicking the pencil icon in the upper right corner and select Cell type > Pipeline Step.")),(0,a.kt)("p",null,"NOTE\nIf you don\u2019t see the pencil icon, please enable Kale from the Kale Deployment Panel.\n2.\tSpecify a unique step name.\n3.\t(Optional) Select one or more steps that the step depends on.\n4.\t(Optional) Specify that this step should run on a GPU node."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Untitled",src:n(1742).Z})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step name Parameter")),(0,a.kt)("p",null,"Step name is the label by which you reference a step in a pipeline. As the step name, create a label that is unique and descriptive. You will use this name as a reference as you define dependency relationships between steps in your pipeline.\nNOTE\nThe step name must consist of only lowercase alphanumeric characters or '_'. The first character must be a lowercase letter.\n",(0,a.kt)("img",{alt:"Untitled",src:n(9510).Z})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Depends on Parameter")),(0,a.kt)("p",null,"The values you select for Depends on list the other steps that must execute before the step you are annotating.\n",(0,a.kt)("img",{alt:"Untitled",src:n(2240).Z})),(0,a.kt)("p",null,"To add dependencies, use the Depends on pull-down menu to select each step whose output will serve as input for the step you are annotating.\nIn the example below, since the step eval_custom evaluates the model created in the step custom_classifier, we select that step from the Depends on pull-down menu.\n",(0,a.kt)("img",{alt:"Untitled",src:n(9528).Z})),(0,a.kt)("p",null,"When selecting steps using the Depends on pull-down menu, identify only steps that are immediate dependencies. Do not include all dependencies back through the machine learning pipeline.\nTogether, the dependencies for all steps in a pipeline, define the execution graph for that pipeline. This helps Kale determine, for example, whether there are branches of your pipeline that can run in parallel.\n",(0,a.kt)("img",{alt:"Untitled",src:n(7855).Z})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Specify Multiple Dependencies:")," A given step may depend on the outputs from more than one other step. The Depends on pull-down menu enables you to select as many other steps as necessary. Select each dependency one at a time.\nRemove Dependencies: To remove a dependency already selected, select the name of that step again from the Depends on pull-down menu. The items in this menu function as toggles for specifying other steps as dependencies.\nGPU parameter\nClick the GPU button when annotating a step, to require that step to run on a GPU. In the modal that appears, enable this requirement using the toggle and specify a number of GPUs and the type of GPU requested.\n",(0,a.kt)("img",{alt:"Untitled",src:n(7972).Z})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parallel Pipeline Steps")),(0,a.kt)("p",null,"Pipeline steps that are independent of one another can run in parallel. For example, the two steps represented below each depend on a step named process_data, but are otherwise independent. Kale uses the dependency graph reflected in the way you define pipeline steps to orchestrate pipeline runs, taking advantage of your Kubernetes infrastructure to run a pipeline as efficiently as possible.\n",(0,a.kt)("img",{alt:"Untitled",src:n(2667).Z})),(0,a.kt)("p",null,"The step  movie_overviews  can run in parallel with the step  preprocessing.\n",(0,a.kt)("img",{alt:"Untitled",src:n(1184).Z})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Skip Cells"),"\nUse Skip to annotate notebook cells that you want Kale to ignore as it defines a Kubeflow pipeline.\nPurpose\nCommon uses of the Skip annotation include identifying console logging and other diagnostic code useful in developing a step of pipeline, but which is not part of your machine learning workflow."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Annotate Skip Cells"),"\nTo annotate skip cells, edit the first cell containing code you want Kale to ignore by clicking the pencil icon in the upper right corner and select Cell type > Skip Cell.\n",(0,a.kt)("img",{alt:"Untitled",src:n(9453).Z})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Pipeline Metrics Cells"),"\nAnnotate a notebook cell with the label Pipeline Metrics to identify code that outputs the results you want to evaluate for a pipeline run.\nPurpose\nBased on the variables referenced in a Pipeline Metrics cell, Kale will define pipeline metrics that the Kubeflow Pipelines (KFP) system will produce for every pipeline run. In addition, Kale will associate each one of these metrics to the steps that produced them. Tracking pipeline metrics is essential to evaluating performance across multiple runs of a pipeline that have been parameterized differently or modified while still in the experimental phase of developing a model.\nPipeline metrics are also key to the AutoML capabilities of Kubeflow and Kale. For example, you will need to choose a single pipeline metric as the search objective metric for hyperparameter tuning experiments.\nAnnotate Pipeline Metrics Cell"),(0,a.kt)("p",null,"NOTE\nPipeline metrics should be considered the result of pipeline execution, not the result of an individual step. You should only annotate one cell with Pipeline Metrics and that cell should be the last cell in your notebook."),(0,a.kt)("p",null,"To identify pipeline metrics, edit the cell containing pipeline metrics statements by clicking the pencil icon in the upper right corner and select Cell type > Pipeline Metrics."),(0,a.kt)("p",null,"NOTE\nIf you don\u2019t see the pencil icon, please enable Kale from the Kale Deployment Panel."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Untitled",src:n(4420).Z})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Run a Pipeline")),(0,a.kt)("p",null,"In this section, we describe how to run a Kubeflow pipeline you created using the Kale JupyterLab extension and summarize how Kale organizes and executes pipeline steps.\nHow to Run a Pipeline\nTo run an annotated notebook as a Kubeflow pipeline (KFP) using Kale:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Enter a name in the Select experiment field under the Pipeline Metadata heading or select an existing name from the pull-down menu. Kale enables you to group multiple pipeline runs together under the same experiment name. This simplifies comparisons across pipeline runs."),(0,a.kt)("li",{parentName:"ol"},"Enter a name in the Pipeline Name field. Kale will use this name to identify your pipeline when producing output from a pipeline run, when creating snapshots, and for other purposes requiring an identifier."),(0,a.kt)("li",{parentName:"ol"},"(Optional) Enter a description in the Pipeline Description field."),(0,a.kt)("li",{parentName:"ol"},"Click the COMPILE AND RUN button at the bottom of the Kale Deployment Panel.\n",(0,a.kt)("img",{alt:"Untitled",src:n(5489).Z}))),(0,a.kt)("p",null,"When you click COMPILE AND RUN Kale will do the following:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Validate your notebook to ensure Kale can create a Kubeflow pipeline based on the annotations you have applied."),(0,a.kt)("li",{parentName:"ol"},"Take a snapshot of your notebook environment workspace and data volumes. Kale uses the Rok data management layer to take snapshots."),(0,a.kt)("li",{parentName:"ol"},"Compile your notebook into a Kubeflow pipeline represented as a YAML file."),(0,a.kt)("li",{parentName:"ol"},"Upload your pipeline to the Kubernetes cluster."),(0,a.kt)("li",{parentName:"ol"},"Run the pipeline.\nKale produces output in the Kale Deployment Panel as each of these tasks progresses. The links following the status message for each task enable you to explore the outcome of each task.\nHow Kale Creates a Pipeline Step\nKale containerizes pipeline steps for execution on your Kubernetes cluster. Therefore, each pipeline step runs in a separate execution environment.\nTo organize the code for a pipeline step, Kale creates a new notebook with cells containing the code that the step needs in order to run. The cells Kale creates are as follows, in order:"),(0,a.kt)("li",{parentName:"ol"},"(Optional) A cell to set the Pipeline Parameters if such a cell was annotated in your notebook."),(0,a.kt)("li",{parentName:"ol"},"A cell with the code necessary to unmarshal the data values the step depends on."),(0,a.kt)("li",{parentName:"ol"},"One or more cells for all code annotated as Imports in the order specified in your notebook."),(0,a.kt)("li",{parentName:"ol"},"One or more cells for all code annotated as Functions in the order specified in your notebook."),(0,a.kt)("li",{parentName:"ol"},"One or more cells for the code annotated as Pipeline Step for the specific step Kale is creating."),(0,a.kt)("li",{parentName:"ol"},"A cell to marshal the data values that other steps depend on."),(0,a.kt)("li",{parentName:"ol"},"(Optional) A Pipeline Metrics cell if such a cell was annotated in your notebook.\nKale configures each pipeline step to execute in an iPython environment. This simulates the way your code would execute if you were simply running your Jupyter notebook.\nHow Kale Marshals Data\nKale will marshal values assigned in Imports and Functions cells so that the data is available in the execution environment for each step of a machine learning pipeline. Changes made to these values are marshalled from step to step as inputs and outputs throughout a pipeline run.\nKale implements backends so that it can marshal objects that cannot be easily stringified. For example, Kale implements specialized backends for PyTorch and scikit-learn objects. Kale\u2019s marshalling backend framework is expandable to accommodate new object types as they are needed.")))}y.isMDXComponent=!0},2191:function(e,t,n){t.Z=n.p+"assets/images/PipelineDeployment1-fcf418a7c44423b69b910886ac40aea5.png"},9510:function(e,t,n){t.Z=n.p+"assets/images/PipelineDeployment10-472fde8a812157beb759d62518a75d25.png"},2240:function(e,t,n){t.Z=n.p+"assets/images/PipelineDeployment11-d7e41f5a4a7856dfcfa094752fe194ba.png"},9528:function(e,t,n){t.Z=n.p+"assets/images/PipelineDeployment12-26328c0ebaf3fc74b082a7ae0a6a0617.png"},7855:function(e,t,n){t.Z=n.p+"assets/images/PipelineDeployment13-6bc3e068cf1650aff5c87bbc2c7ef368.png"},7972:function(e,t,n){t.Z=n.p+"assets/images/PipelineDeployment14-aaa488ecdd0c249a03dfe27e9dda3c4a.png"},2667:function(e,t,n){t.Z=n.p+"assets/images/PipelineDeployment15-05870d836f2337ec8f840769b1fd1e82.png"},1184:function(e,t,n){t.Z=n.p+"assets/images/PipelineDeployment16-cd293be58205e979c2da07c5867b6401.png"},9453:function(e,t,n){t.Z=n.p+"assets/images/PipelineDeployment17-d3a16f745666707ad002832a51629691.png"},4420:function(e,t,n){t.Z=n.p+"assets/images/PipelineDeployment18-386634a2684453cda9429b7b1c5ea710.png"},5489:function(e,t,n){t.Z=n.p+"assets/images/PipelineDeployment19-841f7870bfb3e80e08c9c6678f4e276d.png"},3521:function(e,t,n){t.Z=n.p+"assets/images/PipelineDeployment2-bc8116533bcd4a0951cb6e3630eda2ae.png"},6215:function(e,t,n){t.Z=n.p+"assets/images/PipelineDeployment3-561dd022be7680fd0062df74ceff05ea.png"},1416:function(e,t,n){t.Z=n.p+"assets/images/PipelineDeployment4-7642461593a38d99e30d11e3182fde51.png"},312:function(e,t,n){t.Z=n.p+"assets/images/PipelineDeployment5-d6f9492fdb8acbf73a6ca890abbc1428.png"},5021:function(e,t,n){t.Z=n.p+"assets/images/PipelineDeployment6-afda5c0a32ae16d17089b9e628aac670.png"},8547:function(e,t,n){t.Z=n.p+"assets/images/PipelineDeployment7-bde916a6e02a76c9456e18108b2a4032.png"},8943:function(e,t,n){t.Z=n.p+"assets/images/PipelineDeployment8-4f11ca16698972a3cc221809edb487f0.png"},1742:function(e,t,n){t.Z=n.p+"assets/images/PipelineDeployment9-9f2e9842f6ef7346e9cb65cd69b535dd.png"}}]);