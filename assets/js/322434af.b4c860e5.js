"use strict";(self.webpackChunkreact_native_website=self.webpackChunkreact_native_website||[]).push([[23437],{35318:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return k}});var a=t(27378);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=s(t),k=r,m=u["".concat(p,".").concat(k)]||u[k]||d[k]||i;return t?a.createElement(m,l(l({ref:n},c),{},{components:t})):a.createElement(m,l({ref:n},c))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=u;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},51561:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return u},contentTitle:function(){return k},metadata:function(){return m},toc:function(){return h},default:function(){return f}});var a=t(35318),r=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,c=(e,n,t)=>n in e?r(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,d=(e,n)=>{for(var t in n||(n={}))p.call(n,t)&&c(e,t,n[t]);if(o)for(var t of o(n))s.call(n,t)&&c(e,t,n[t]);return e};const u={id:"linking",title:"Linking"},k=void 0,m={unversionedId:"linking",id:"version-0.61/linking",title:"Linking",description:"Projects with Native Code Only",source:"@site/versioned_docs/version-0.61/linking.md",sourceDirName:".",slug:"/linking",permalink:"/docs/0.61/linking",editUrl:"https://github.com/facebook/react-native-website/blob/master/website/../docs/linking.md",tags:[],version:"0.61",lastUpdatedAt:1648760516,formattedLastUpdatedAt:"4/1/2022",frontMatter:{id:"linking",title:"Linking"},sidebar:"version-0.61/api",previous:{title:"LayoutAnimation",permalink:"/docs/0.61/layoutanimation"},next:{title:"PanResponder",permalink:"/docs/0.61/panresponder"}},h=[{value:"Basic Usage",id:"basic-usage",children:[{value:"Handling deep links",id:"handling-deep-links",children:[],level:4},{value:"Opening external links",id:"opening-external-links",children:[],level:4}],level:3},{value:"Methods",id:"methods",children:[{value:"<code>constructor()</code>",id:"constructor",children:[],level:3},{value:"<code>addEventListener()</code>",id:"addeventlistener",children:[],level:3},{value:"<code>removeEventListener()</code>",id:"removeeventlistener",children:[],level:3},{value:"<code>openURL()</code>",id:"openurl",children:[],level:3},{value:"<code>canOpenURL()</code>",id:"canopenurl",children:[],level:3},{value:"<code>openSettings()</code>",id:"opensettings",children:[],level:3},{value:"<code>getInitialURL()</code>",id:"getinitialurl",children:[],level:3},{value:"<code>sendIntent()</code>",id:"sendintent",children:[],level:3}],level:2}],g={toc:h};function f(e){var n,t=e,{components:r}=t,c=((e,n)=>{var t={};for(var a in e)p.call(e,a)&&n.indexOf(a)<0&&(t[a]=e[a]);if(null!=e&&o)for(var a of o(e))n.indexOf(a)<0&&s.call(e,a)&&(t[a]=e[a]);return t})(t,["components"]);return(0,a.kt)("wrapper",(n=d(d({},g),c),i(n,l({components:r,mdxType:"MDXLayout"}))),(0,a.kt)("div",{class:"banner-native-code-required"},(0,a.kt)("h3",null,"Projects with Native Code Only"),(0,a.kt)("p",null,"The following section only applies to projects with native code exposed. If you are using the managed `expo-cli` workflow, see the guide on ",(0,a.kt)("a",{href:"http://docs.expo.io/versions/latest/workflow/linking/"},"Linking")," in the Expo documentation for the appropriate alternative.")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Linking")," gives you a general interface to interact with both incoming and outgoing app links."),(0,a.kt)("h3",d({},{id:"basic-usage"}),"Basic Usage"),(0,a.kt)("h4",d({},{id:"handling-deep-links"}),"Handling deep links"),(0,a.kt)("p",null,"If your app was launched from an external url registered to your app you can access and handle it from any component you want with:"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-jsx"}),"componentDidMount() {\n  Linking.getInitialURL().then((url) => {\n    if (url) {\n      console.log('Initial url is: ' + url);\n    }\n  }).catch(err => console.error('An error occurred', err));\n}\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"For instructions on how to add support for deep linking on Android, refer to ",(0,a.kt)("a",d({parentName:"p"},{href:"http://developer.android.com/training/app-indexing/deep-linking.html#adding-filters"}),"Enabling Deep Links for App Content - Add Intent Filters for Your Deep Links"),".")),(0,a.kt)("p",null,"If you wish to receive the intent in an existing instance of MainActivity, you may set the ",(0,a.kt)("inlineCode",{parentName:"p"},"launchMode")," of MainActivity to ",(0,a.kt)("inlineCode",{parentName:"p"},"singleTask")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"AndroidManifest.xml"),". See ",(0,a.kt)("a",d({parentName:"p"},{href:"http://developer.android.com/guide/topics/manifest/activity-element.html"}),(0,a.kt)("inlineCode",{parentName:"a"},"<activity>"))," documentation for more information."),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-xml"}),'<activity\n  android:name=".MainActivity"\n  android:launchMode="singleTask">\n')),(0,a.kt)("p",null,"NOTE: On iOS, you'll need to link ",(0,a.kt)("inlineCode",{parentName:"p"},"RCTLinking")," to your project by following the steps described ",(0,a.kt)("a",d({parentName:"p"},{href:"/docs/0.61/linking-libraries-ios#manual-linking"}),"here"),". If you also want to listen to incoming app links during your app's execution, you'll need to add the following lines to your ",(0,a.kt)("inlineCode",{parentName:"p"},"*AppDelegate.m"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-objectivec"}),"// iOS 9.x or newer\n#import <React/RCTLinkingManager.h>\n\n- (BOOL)application:(UIApplication *)application\n   openURL:(NSURL *)url\n   options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options\n{\n  return [RCTLinkingManager application:application openURL:url options:options];\n}\n")),(0,a.kt)("p",null,"If you're targeting iOS 8.x or older, you can use the following code instead:"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-objectivec"}),"// iOS 8.x or older\n#import <React/RCTLinkingManager.h>\n\n- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication annotation:(id)annotation\n{\n  return [RCTLinkingManager application:application openURL:url\n                      sourceApplication:sourceApplication annotation:annotation];\n}\n")),(0,a.kt)("p",null,"If your app is using ",(0,a.kt)("a",d({parentName:"p"},{href:"https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/AppSearch/UniversalLinks.html"}),"Universal Links"),", you'll need to add the following code as well:"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-objectivec"}),"- (BOOL)application:(UIApplication *)application continueUserActivity:(nonnull NSUserActivity *)userActivity\n restorationHandler:(nonnull void (^)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler\n{\n return [RCTLinkingManager application:application\n                  continueUserActivity:userActivity\n                    restorationHandler:restorationHandler];\n}\n")),(0,a.kt)("p",null,"And then on your React component you'll be able to listen to the events on ",(0,a.kt)("inlineCode",{parentName:"p"},"Linking")," as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-jsx"}),"componentDidMount() {\n  Linking.addEventListener('url', this._handleOpenURL);\n},\ncomponentWillUnmount() {\n  Linking.removeEventListener('url', this._handleOpenURL);\n},\n_handleOpenURL(event) {\n  console.log(event.url);\n}\n")),(0,a.kt)("h4",d({},{id:"opening-external-links"}),"Opening external links"),(0,a.kt)("p",null,"To start the corresponding activity for a link (web URL, email, contact etc.), call:"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-jsx"}),"Linking.openURL(url).catch((err) =>\n  console.error('An error occurred', err)\n);\n")),(0,a.kt)("p",null,"If you want to check if any installed app can handle a given URL beforehand you can call:"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-jsx"}),"Linking.canOpenURL(url)\n  .then((supported) => {\n    if (!supported) {\n      console.log(\"Can't handle url: \" + url);\n    } else {\n      return Linking.openURL(url);\n    }\n  })\n  .catch((err) => console.error('An error occurred', err));\n")),(0,a.kt)("hr",null),(0,a.kt)("h1",d({},{id:"reference"}),"Reference"),(0,a.kt)("h2",d({},{id:"methods"}),"Methods"),(0,a.kt)("h3",d({},{id:"constructor"}),(0,a.kt)("inlineCode",{parentName:"h3"},"constructor()")),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-jsx"}),"constructor();\n")),(0,a.kt)("hr",null),(0,a.kt)("h3",d({},{id:"addeventlistener"}),(0,a.kt)("inlineCode",{parentName:"h3"},"addEventListener()")),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-jsx"}),"addEventListener(type, handler);\n")),(0,a.kt)("p",null,"Add a handler to Linking changes by listening to the ",(0,a.kt)("inlineCode",{parentName:"p"},"url")," event type and providing the handler."),(0,a.kt)("hr",null),(0,a.kt)("h3",d({},{id:"removeeventlistener"}),(0,a.kt)("inlineCode",{parentName:"h3"},"removeEventListener()")),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-jsx"}),"removeEventListener(type, handler);\n")),(0,a.kt)("p",null,"Remove a handler by passing the ",(0,a.kt)("inlineCode",{parentName:"p"},"url")," event type and the handler."),(0,a.kt)("hr",null),(0,a.kt)("h3",d({},{id:"openurl"}),(0,a.kt)("inlineCode",{parentName:"h3"},"openURL()")),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-jsx"}),"openURL(url);\n")),(0,a.kt)("p",null,"Try to open the given ",(0,a.kt)("inlineCode",{parentName:"p"},"url")," with any of the installed apps."),(0,a.kt)("p",null,'You can use other URLs, like a location (e.g. "geo:37.484847,-122.148386" on Android or "',(0,a.kt)("a",d({parentName:"p"},{href:"http://maps.apple.com/?ll=37.484847,-122.148386%22"}),'http://maps.apple.com/?ll=37.484847,-122.148386"')," on iOS), a contact, or any other URL that can be opened with the installed apps."),(0,a.kt)("p",null,"The method returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise")," object. If the user confirms the open dialog or the url automatically opens, the promise is resolved. If the user cancels the open dialog or there are no registered applications for the url, the promise is rejected."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parameters:")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",d({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",d({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",d({parentName:"tr"},{align:null}),"Required"),(0,a.kt)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:null}),"url"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"string"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"Yes"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"The URL to open.")))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This method will fail if the system doesn't know how to open the specified URL. If you're passing in a non-http(s) URL, it's best to check {@code canOpenURL} first.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},'For web URLs, the protocol ("http://", "https://") must be set accordingly!')),(0,a.kt)("hr",null),(0,a.kt)("h3",d({},{id:"canopenurl"}),(0,a.kt)("inlineCode",{parentName:"h3"},"canOpenURL()")),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-jsx"}),"canOpenURL(url);\n")),(0,a.kt)("p",null,"Determine whether or not an installed app can handle a given URL."),(0,a.kt)("p",null,"The method returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise")," object. When it is determined whether or not the given URL can be handled, the promise is resolved and the first parameter is whether or not it can be opened."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise")," will reject on Android if it was impossible to check if the URL can be opened, and on iOS if you didn't add the specific scheme in the ",(0,a.kt)("inlineCode",{parentName:"p"},"LSApplicationQueriesSchemes")," key inside ",(0,a.kt)("inlineCode",{parentName:"p"},"Info.plist")," (see bellow)."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parameters:")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",d({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",d({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",d({parentName:"tr"},{align:null}),"Required"),(0,a.kt)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:null}),"url"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"string"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"Yes"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"The URL to open.")))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},'For web URLs, the protocol ("http://", "https://") must be set accordingly!')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"As of iOS 9, your app needs to provide the ",(0,a.kt)("inlineCode",{parentName:"p"},"LSApplicationQueriesSchemes")," key inside ",(0,a.kt)("inlineCode",{parentName:"p"},"Info.plist")," or canOpenURL will always return false.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This method has limitations on iOS 9+. From ",(0,a.kt)("a",d({parentName:"p"},{href:"https://developer.apple.com/documentation/uikit/uiapplication/1622952-canopenurl"}),"the official Apple documentation"),":")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"If your app is linked against an earlier version of iOS but is running in iOS 9.0 or later, you can call this method up to 50 times. After reaching that limit, subsequent calls always return false. If the user reinstalls or upgrades the app, iOS resets the limit.")),(0,a.kt)("hr",null),(0,a.kt)("h3",d({},{id:"opensettings"}),(0,a.kt)("inlineCode",{parentName:"h3"},"openSettings()")),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-jsx"}),"openSettings();\n")),(0,a.kt)("p",null,"Open the Settings app and displays the app\u2019s custom settings, if it has any."),(0,a.kt)("hr",null),(0,a.kt)("h3",d({},{id:"getinitialurl"}),(0,a.kt)("inlineCode",{parentName:"h3"},"getInitialURL()")),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-jsx"}),"getInitialURL();\n")),(0,a.kt)("p",null,"If the app launch was triggered by an app link, it will give the link url, otherwise it will give ",(0,a.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"To support deep linking on Android, refer ",(0,a.kt)("a",d({parentName:"p"},{href:"http://developer.android.com/training/app-indexing/deep-linking.html#handling-intents"}),"http://developer.android.com/training/app-indexing/deep-linking.html#handling-intents"))),(0,a.kt)("hr",null),(0,a.kt)("h3",d({},{id:"sendintent"}),(0,a.kt)("inlineCode",{parentName:"h3"},"sendIntent()")),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-jsx"}),"sendIntent(action: string, extras?: Array<{key: string, value: string | number | boolean}>)\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"@platform android")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Android-Only.")," Launch an Android intent with extras (optional)"))}f.isMDXComponent=!0}}]);