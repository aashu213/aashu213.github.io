"use strict";(self.webpackChunkreact_native_website=self.webpackChunkreact_native_website||[]).push([[29655],{35318:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return k}});var a=n(27378);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=d(n),k=l,m=c["".concat(p,".").concat(k)]||c[k]||u[k]||r;return n?a.createElement(m,i(i({ref:t},s),{},{components:n})):a.createElement(m,i({ref:t},s))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var d=2;d<r;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},16622:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return k},metadata:function(){return m},toc:function(){return g},default:function(){return b}});var a=n(35318),l=Object.defineProperty,r=Object.defineProperties,i=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable,s=(e,t,n)=>t in e?l(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,u=(e,t)=>{for(var n in t||(t={}))p.call(t,n)&&s(e,n,t[n]);if(o)for(var n of o(t))d.call(t,n)&&s(e,n,t[n]);return e};const c={id:"viewpagerandroid",title:"\ud83d\udea7 ViewPagerAndroid"},k=void 0,m={unversionedId:"viewpagerandroid",id:"version-0.61/viewpagerandroid",title:"\ud83d\udea7 ViewPagerAndroid",description:"Removed. Use one of the community packages instead.",source:"@site/versioned_docs/version-0.61/viewpagerandroid.md",sourceDirName:".",slug:"/viewpagerandroid",permalink:"/docs/0.61/viewpagerandroid",editUrl:"https://github.com/facebook/react-native-website/blob/master/website/../docs/viewpagerandroid.md",tags:[],version:"0.61",lastUpdatedAt:1648760516,formattedLastUpdatedAt:"4/1/2022",frontMatter:{id:"viewpagerandroid",title:"\ud83d\udea7 ViewPagerAndroid"},sidebar:"version-0.61/components",previous:{title:"View",permalink:"/docs/0.61/view"},next:{title:"VirtualizedList",permalink:"/docs/0.61/virtualizedlist"}},g=[{value:"Props",id:"props",children:[{value:"<code>initialPage</code>",id:"initialpage",children:[],level:3},{value:"<code>keyboardDismissMode</code>",id:"keyboarddismissmode",children:[],level:3},{value:"<code>onPageScroll</code>",id:"onpagescroll",children:[],level:3},{value:"<code>onPageScrollStateChanged</code>",id:"onpagescrollstatechanged",children:[],level:3},{value:"<code>onPageSelected</code>",id:"onpageselected",children:[],level:3},{value:"<code>pageMargin</code>",id:"pagemargin",children:[],level:3},{value:"<code>peekEnabled</code>",id:"peekenabled",children:[],level:3},{value:"<code>scrollEnabled</code>",id:"scrollenabled",children:[],level:3},{value:"<code>setPage</code>",id:"setpage",children:[],level:3},{value:"<code>setPageWithoutAnimation</code>",id:"setpagewithoutanimation",children:[],level:3}],level:2},{value:"Type Definitions",id:"type-definitions",children:[{value:"ViewPagerScrollState",id:"viewpagerscrollstate",children:[],level:3}],level:2}],h={toc:g};function b(e){var t,n=e,{components:l}=n,s=((e,t)=>{var n={};for(var a in e)p.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&o)for(var a of o(e))t.indexOf(a)<0&&d.call(e,a)&&(n[a]=e[a]);return n})(n,["components"]);return(0,a.kt)("wrapper",(t=u(u({},h),s),r(t,i({components:l,mdxType:"MDXLayout"}))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Removed.")," Use one of the ",(0,a.kt)("a",u({parentName:"p"},{href:"https://reactnative.directory/?search=viewpager"}),"community packages")," instead.")),(0,a.kt)("p",null,"Container that allows to flip left and right between child views. Each child view of the ",(0,a.kt)("inlineCode",{parentName:"p"},"ViewPagerAndroid")," will be treated as a separate page and will be stretched to fill the ",(0,a.kt)("inlineCode",{parentName:"p"},"ViewPagerAndroid"),"."),(0,a.kt)("p",null,"It is important all children are ",(0,a.kt)("inlineCode",{parentName:"p"},"<View>"),"s and not composite components. You can set style properties like ",(0,a.kt)("inlineCode",{parentName:"p"},"padding")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"backgroundColor")," for each child. It is also important that each child have a ",(0,a.kt)("inlineCode",{parentName:"p"},"key")," prop."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",u({parentName:"pre"},{className:"language-jsx"}),'render() {\n  return (\n    <ViewPagerAndroid\n      style={styles.viewPager}\n      initialPage={0}>\n      <View style={styles.pageStyle} key="1">\n        <Text>First page</Text>\n      </View>\n      <View style={styles.pageStyle} key="2">\n        <Text>Second page</Text>\n      </View>\n    </ViewPagerAndroid>\n  );\n}\n\n...\n\nconst styles = {\n  ...\n  viewPager: {\n    flex: 1\n  },\n  pageStyle: {\n    alignItems: \'center\',\n    padding: 20,\n  }\n}\n')),(0,a.kt)("hr",null),(0,a.kt)("h1",u({},{id:"reference"}),"Reference"),(0,a.kt)("h2",u({},{id:"props"}),"Props"),(0,a.kt)("p",null,"Inherits ",(0,a.kt)("a",u({parentName:"p"},{href:"/docs/0.61/view#props"}),"View Props"),"."),(0,a.kt)("h3",u({},{id:"initialpage"}),(0,a.kt)("inlineCode",{parentName:"h3"},"initialPage")),(0,a.kt)("p",null,"Index of initial page that should be selected. Use ",(0,a.kt)("inlineCode",{parentName:"p"},"setPage")," method to update the page, and ",(0,a.kt)("inlineCode",{parentName:"p"},"onPageSelected")," to monitor page changes"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"number"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",u({},{id:"keyboarddismissmode"}),(0,a.kt)("inlineCode",{parentName:"h3"},"keyboardDismissMode")),(0,a.kt)("p",null,"Determines whether the keyboard gets dismissed in response to a drag."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"'none' (the default), drags do not dismiss the keyboard."),(0,a.kt)("li",{parentName:"ul"},"'on-drag', the keyboard is dismissed when a drag begins.")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"enum('none', 'on-drag')"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",u({},{id:"onpagescroll"}),(0,a.kt)("inlineCode",{parentName:"h3"},"onPageScroll")),(0,a.kt)("p",null,"Executed when transitioning between pages (either because of animation for the requested page change or when user is swiping/dragging between pages) The ",(0,a.kt)("inlineCode",{parentName:"p"},"event.nativeEvent")," object for this callback will carry following data:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"position - index of first page from the left that is currently visible"),(0,a.kt)("li",{parentName:"ul"},"offset - value from range ","[0, 1]",' describing stage between page transitions. Value x means that (1 - x) fraction of the page at "position" index is visible, and x fraction of the next page is visible.')),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"function"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",u({},{id:"onpagescrollstatechanged"}),(0,a.kt)("inlineCode",{parentName:"h3"},"onPageScrollStateChanged")),(0,a.kt)("p",null,"Function called when the page scrolling state has changed. The page scrolling state can be in 3 states:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"idle, meaning there is no interaction with the page scroller happening at the time"),(0,a.kt)("li",{parentName:"ul"},"dragging, meaning there is currently an interaction with the page scroller"),(0,a.kt)("li",{parentName:"ul"},"settling, meaning that there was an interaction with the page scroller, and the page scroller is now finishing its closing or opening animation")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"function"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",u({},{id:"onpageselected"}),(0,a.kt)("inlineCode",{parentName:"h3"},"onPageSelected")),(0,a.kt)("p",null,"This callback will be called once ViewPager finish navigating to selected page (when user swipes between pages). The ",(0,a.kt)("inlineCode",{parentName:"p"},"event.nativeEvent")," object passed to this callback will have following fields:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"position - index of page that has been selected")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"function"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",u({},{id:"pagemargin"}),(0,a.kt)("inlineCode",{parentName:"h3"},"pageMargin")),(0,a.kt)("p",null,"Blank space to show between pages. This is only visible while scrolling, pages are still edge-to-edge."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"number"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",u({},{id:"peekenabled"}),(0,a.kt)("inlineCode",{parentName:"h3"},"peekEnabled")),(0,a.kt)("p",null,"Whether enable showing peekFraction or not. If this is true, the preview of last and next page will show in current screen. Defaults to false."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"bool"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",u({},{id:"scrollenabled"}),(0,a.kt)("inlineCode",{parentName:"h3"},"scrollEnabled")),(0,a.kt)("p",null,"When false, the content does not scroll. The default value is true."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"bool"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("hr",null),(0,a.kt)("h3",u({},{id:"setpage"}),(0,a.kt)("inlineCode",{parentName:"h3"},"setPage")),(0,a.kt)("p",null,"A helper function to scroll to a specific page in the ViewPager. The transition between pages will be animated."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"position - index of page that will be selected")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Number"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Yes")))),(0,a.kt)("hr",null),(0,a.kt)("h3",u({},{id:"setpagewithoutanimation"}),(0,a.kt)("inlineCode",{parentName:"h3"},"setPageWithoutAnimation")),(0,a.kt)("p",null,"A helper function to scroll to a specific page in the ViewPager. The transition between pages will ",(0,a.kt)("em",{parentName:"p"},"not")," be animated."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"position - index of page that will be selected")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Number"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Yes")))),(0,a.kt)("h2",u({},{id:"type-definitions"}),"Type Definitions"),(0,a.kt)("h3",u({},{id:"viewpagerscrollstate"}),"ViewPagerScrollState"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"\\$Enum")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constants:")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Value"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"idle"),(0,a.kt)("td",u({parentName:"tr"},{align:null}))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"dragging"),(0,a.kt)("td",u({parentName:"tr"},{align:null}))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"settling"),(0,a.kt)("td",u({parentName:"tr"},{align:null}))))))}b.isMDXComponent=!0}}]);