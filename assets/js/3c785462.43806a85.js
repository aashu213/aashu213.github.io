"use strict";(self.webpackChunkreact_native_website=self.webpackChunkreact_native_website||[]).push([[62329],{35318:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(27378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},38654:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return m},metadata:function(){return f},toc:function(){return h},default:function(){return b}});var r=n(35318),a=Object.defineProperty,o=Object.defineProperties,i=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,c=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,p=(e,t,n)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,d=(e,t)=>{for(var n in t||(t={}))c.call(t,n)&&p(e,n,t[n]);if(l)for(var n of l(t))s.call(t,n)&&p(e,n,t[n]);return e};const u={id:"backhandler",title:"BackHandler"},m=void 0,f={unversionedId:"backhandler",id:"version-0.61/backhandler",title:"BackHandler",description:"Detect hardware button presses for back navigation.",source:"@site/versioned_docs/version-0.61/backhandler.md",sourceDirName:".",slug:"/backhandler",permalink:"/docs/0.61/backhandler",editUrl:"https://github.com/facebook/react-native-website/blob/master/website/../docs/backhandler.md",tags:[],version:"0.61",lastUpdatedAt:1648760516,formattedLastUpdatedAt:"4/1/2022",frontMatter:{id:"backhandler",title:"BackHandler"},sidebar:"version-0.61/api",previous:{title:"\ud83d\udea7 AsyncStorage",permalink:"/docs/0.61/asyncstorage"},next:{title:"\ud83d\udea7 Clipboard",permalink:"/docs/0.61/clipboard"}},h=[{value:"Methods",id:"methods",children:[{value:"<code>addEventListener()</code>",id:"addeventlistener",children:[],level:3},{value:"<code>exitApp()</code>",id:"exitapp",children:[],level:3},{value:"<code>removeEventListener()</code>",id:"removeeventlistener",children:[],level:3}],level:2}],k={toc:h};function b(e){var t,n=e,{components:a}=n,p=((e,t)=>{var n={};for(var r in e)c.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&l)for(var r of l(e))t.indexOf(r)<0&&s.call(e,r)&&(n[r]=e[r]);return n})(n,["components"]);return(0,r.kt)("wrapper",(t=d(d({},k),p),o(t,i({components:a,mdxType:"MDXLayout"}))),(0,r.kt)("p",null,"Detect hardware button presses for back navigation."),(0,r.kt)("p",null,"Android: Detect hardware back button presses, and programmatically invoke the default back button functionality to exit the app if there are no listeners or if none of the listeners return true."),(0,r.kt)("p",null,"tvOS: Detect presses of the menu button on the TV remote. (Still to be implemented: programmatically disable menu button handling functionality to exit the app if there are no listeners or if none of the listeners return true.)"),(0,r.kt)("p",null,"iOS: Not applicable."),(0,r.kt)("p",null,"The event subscriptions are called in reverse order (i.e. last registered subscription first), and if one subscription returns true then subscriptions registered earlier will not be called. Beware: If your app shows an opened ",(0,r.kt)("inlineCode",{parentName:"p"},"Modal"),", BackHandler will not publish any events (",(0,r.kt)("a",d({parentName:"p"},{href:"/docs/modal#onrequestclose"}),"see ",(0,r.kt)("inlineCode",{parentName:"a"},"Modal")," docs"),")."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",d({parentName:"pre"},{className:"language-jsx"}),"BackHandler.addEventListener('hardwareBackPress', function () {\n  // this.onMainScreen and this.goBack are just examples, you need to use your own implementation here\n  // Typically you would use the navigator here to go to the last state.\n\n  if (!this.onMainScreen()) {\n    this.goBack();\n    return true;\n  }\n  return false;\n});\n")),(0,r.kt)("p",null,"Lifecycle example:"),(0,r.kt)("pre",null,(0,r.kt)("code",d({parentName:"pre"},{className:"language-jsx"}),"  componentDidMount() {\n    this.backHandler = BackHandler.addEventListener('hardwareBackPress', this.handleBackPress);\n  }\n\n  componentWillUnmount() {\n    this.backHandler.remove()\n  }\n\n  handleBackPress = () => {\n    this.goBack(); // works best when the goBack is async\n    return true;\n  }\n")),(0,r.kt)("p",null,"Lifecycle alternative:"),(0,r.kt)("pre",null,(0,r.kt)("code",d({parentName:"pre"},{className:"language-jsx"}),"  componentDidMount() {\n    this.backHandler = BackHandler.addEventListener('hardwareBackPress', () => {\n      this.goBack(); // works best when the goBack is async\n      return true;\n    });\n  }\n\n  componentWillUnmount() {\n    this.backHandler.remove();\n  }\n")),(0,r.kt)("hr",null),(0,r.kt)("h1",d({},{id:"reference"}),"Reference"),(0,r.kt)("h2",d({},{id:"methods"}),"Methods"),(0,r.kt)("h3",d({},{id:"addeventlistener"}),(0,r.kt)("inlineCode",{parentName:"h3"},"addEventListener()")),(0,r.kt)("pre",null,(0,r.kt)("code",d({parentName:"pre"},{className:"language-jsx"}),"static addEventListener(eventName, handler)\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",d({},{id:"exitapp"}),(0,r.kt)("inlineCode",{parentName:"h3"},"exitApp()")),(0,r.kt)("pre",null,(0,r.kt)("code",d({parentName:"pre"},{className:"language-jsx"}),"static exitApp()\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",d({},{id:"removeeventlistener"}),(0,r.kt)("inlineCode",{parentName:"h3"},"removeEventListener()")),(0,r.kt)("pre",null,(0,r.kt)("code",d({parentName:"pre"},{className:"language-jsx"}),"static removeEventListener(eventName, handler)\n")))}b.isMDXComponent=!0}}]);