"use strict";(self.webpackChunkreact_native_website=self.webpackChunkreact_native_website||[]).push([[2437],{5318:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var r=n(7378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),s=u(n),d=i,x=s["".concat(p,".").concat(d)]||s[d]||c[d]||l;return n?r.createElement(x,a(a({ref:t},m),{},{components:n})):r.createElement(x,a({ref:t},m))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,a=new Array(l);a[0]=s;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var u=2;u<l;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},1394:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return d},metadata:function(){return x},toc:function(){return f},default:function(){return g}});var r=n(5318),i=Object.defineProperty,l=Object.defineProperties,a=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,m=(e,t,n)=>t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,c=(e,t)=>{for(var n in t||(t={}))p.call(t,n)&&m(e,n,t[n]);if(o)for(var n of o(t))u.call(t,n)&&m(e,n,t[n]);return e};const s={id:"Experiment-Operations",title:"Experiment Operations"},d="Experiment Operations",x={unversionedId:"Experiment-Operations",id:"version-0.68/Experiment-Operations",title:"Experiment Operations",description:"Create a New Experiment",source:"@site/versioned_docs/version-0.68/Experiment-Operations.md",sourceDirName:".",slug:"/Experiment-Operations",permalink:"/Experiment-Operations",editUrl:"https://github.com/facebook/react-native-website/blob/master/website/../docs/Experiment-Operations.md",tags:[],version:"0.68",lastUpdatedAt:1649189629,formattedLastUpdatedAt:"4/6/2022",frontMatter:{id:"Experiment-Operations",title:"Experiment Operations"},sidebar:"sdk",previous:{title:"Intoduction",permalink:"/readmesdk"},next:{title:"Registry Operation",permalink:"/Registry-Operation"}},f=[{value:"Create a New Experiment",id:"create-a-new-experiment",children:[],level:2},{value:"Continue Existing Experiment",id:"continue-existing-experiment",children:[],level:2},{value:"Get info of an Existing Experiment",id:"get-info-of-an-existing-experiment",children:[],level:2},{value:"Delete Experiment",id:"delete-experiment",children:[],level:2}],k={toc:f};function g(e){var t,n=e,{components:i}=n,m=((e,t)=>{var n={};for(var r in e)p.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&o)for(var r of o(e))t.indexOf(r)<0&&u.call(e,r)&&(n[r]=e[r]);return n})(n,["components"]);return(0,r.kt)("wrapper",(t=c(c({},k),m),l(t,a({components:i,mdxType:"MDXLayout"}))),(0,r.kt)("h1",c({},{id:"experiment-operations"}),"Experiment Operations"),(0,r.kt)("h2",c({},{id:"create-a-new-experiment"}),"Create a New Experiment"),(0,r.kt)("p",null,"If experiment does not exist, create an experiment with provided name."),(0,r.kt)("pre",null,(0,r.kt)("code",c({parentName:"pre"},{className:"language-python"}),"from katonic.ml.client import set_exp\n\nset_exp(exp_name='exp-name')\n")),(0,r.kt)("pre",null,(0,r.kt)("code",c({parentName:"pre"},{className:"language-python"}),"> INFO: 'exp-name' does not exist. Creating a new experiment\n")),(0,r.kt)("h2",c({},{id:"continue-existing-experiment"}),"Continue Existing Experiment"),(0,r.kt)("p",null,"Set given experiment as active experiment."),(0,r.kt)("pre",null,(0,r.kt)("code",c({parentName:"pre"},{className:"language-python"}),"from katonic.ml.client import set_exp\n\nset_exp(exp_name='previous-exp-name')\n")),(0,r.kt)("h2",c({},{id:"get-info-of-an-existing-experiment"}),"Get info of an Existing Experiment"),(0,r.kt)("p",null,"Retrieve an experiment by experiment name from the backend store."),(0,r.kt)("pre",null,(0,r.kt)("code",c({parentName:"pre"},{className:"language-python"}),"from katonic.ml.util import get_exp\n\nget_exp(exp_name='exp-name')\n")),(0,r.kt)("div",null,(0,r.kt)("table",{border:"1",class:"dataframe"},(0,r.kt)("thead",null,(0,r.kt)("tr",{style:{marginRight:"2em"}},(0,r.kt)("th",null),(0,r.kt)("th",null,"parameters"))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"experiment_name"),(0,r.kt)("td",null,"exp-name")),(0,r.kt)("tr",null,(0,r.kt)("th",null,"location"),(0,r.kt)("td",null,"s3://models/18")),(0,r.kt)("tr",null,(0,r.kt)("th",null,"experiment_id"),(0,r.kt)("td",null,"18")),(0,r.kt)("tr",null,(0,r.kt)("th",null,"experiment_stage"),(0,r.kt)("td",null,"active")),(0,r.kt)("tr",null,(0,r.kt)("th",null,"tags"),(0,r.kt)("td",null))))),(0,r.kt)("h2",c({},{id:"delete-experiment"}),"Delete Experiment"),(0,r.kt)("p",null,"To delete any experiment first get the experiment id of that experiment name from get_exp"),(0,r.kt)("pre",null,(0,r.kt)("code",c({parentName:"pre"},{className:"language-python"}),"from katonic.ml.util import get_exp, delete_exp\n\nget_exp(exp_name='previous-exp-name')\n")),(0,r.kt)("div",null,(0,r.kt)("table",{border:"1",class:"dataframe"},(0,r.kt)("thead",null,(0,r.kt)("tr",{style:{marginRight:"2em"}},(0,r.kt)("th",null),(0,r.kt)("th",null,"parameters"))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"experiment_name"),(0,r.kt)("td",null,"previous-exp-name")),(0,r.kt)("tr",null,(0,r.kt)("th",null,"location"),(0,r.kt)("td",null,"s3://models/17")),(0,r.kt)("tr",null,(0,r.kt)("th",null,"experiment_id"),(0,r.kt)("td",null,"17")),(0,r.kt)("tr",null,(0,r.kt)("th",null,"experiment_stage"),(0,r.kt)("td",null,"active")),(0,r.kt)("tr",null,(0,r.kt)("th",null,"tags"),(0,r.kt)("td",null))))),(0,r.kt)("pre",null,(0,r.kt)("code",c({parentName:"pre"},{className:"language-python"}),"delete_exp(experiment_id=17)\n")))}g.isMDXComponent=!0}}]);