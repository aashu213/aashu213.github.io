"use strict";(self.webpackChunkreact_native_website=self.webpackChunkreact_native_website||[]).push([[33433],{35318:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var r=n(27378);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(n),h=o,m=d["".concat(c,".").concat(h)]||d[h]||u[h]||a;return n?r.createElement(m,s(s({ref:t},p),{},{components:n})):r.createElement(m,s({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},71121:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return d},contentTitle:function(){return h},metadata:function(){return m},toc:function(){return f},default:function(){return g}});var r=n(35318),o=Object.defineProperty,a=Object.defineProperties,s=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,c=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable,p=(e,t,n)=>t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,u=(e,t)=>{for(var n in t||(t={}))c.call(t,n)&&p(e,n,t[n]);if(i)for(var n of i(t))l.call(t,n)&&p(e,n,t[n]);return e};const d={id:"network",title:"Networking"},h=void 0,m={unversionedId:"network",id:"version-0.61/network",title:"Networking",description:"Many mobile apps need to load resources from a remote URL. You may want to make a POST request to a REST API, or you may need to fetch a chunk of static content from another server.",source:"@site/versioned_docs/version-0.61/network.md",sourceDirName:".",slug:"/network",permalink:"/docs/0.61/network",editUrl:"https://github.com/facebook/react-native-website/blob/master/website/../docs/network.md",tags:[],version:"0.61",lastUpdatedAt:1648760516,formattedLastUpdatedAt:"4/1/2022",frontMatter:{id:"network",title:"Networking"},sidebar:"version-0.61/docs",previous:{title:"Using List Views",permalink:"/docs/0.61/using-a-listview"},next:{title:"More Resources",permalink:"/docs/0.61/more-resources"}},f=[{value:"Using Fetch",id:"using-fetch",children:[{value:"Making requests",id:"making-requests",children:[],level:4},{value:"Handling the response",id:"handling-the-response",children:[],level:4},{value:"Using Other Networking Libraries",id:"using-other-networking-libraries",children:[],level:3}],level:2},{value:"WebSocket Support",id:"websocket-support",children:[],level:2},{value:"Known Issues with <code>fetch</code> and cookie based authentication",id:"known-issues-with-fetch-and-cookie-based-authentication",children:[],level:2}],k={toc:f};function g(e){var t,n=e,{components:o}=n,p=((e,t)=>{var n={};for(var r in e)c.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&i)for(var r of i(e))t.indexOf(r)<0&&l.call(e,r)&&(n[r]=e[r]);return n})(n,["components"]);return(0,r.kt)("wrapper",(t=u(u({},k),p),a(t,s({components:o,mdxType:"MDXLayout"}))),(0,r.kt)("p",null,"Many mobile apps need to load resources from a remote URL. You may want to make a POST request to a REST API, or you may need to fetch a chunk of static content from another server."),(0,r.kt)("h2",u({},{id:"using-fetch"}),"Using Fetch"),(0,r.kt)("p",null,"React Native provides the ",(0,r.kt)("a",u({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"}),"Fetch API")," for your networking needs. Fetch will seem familiar if you have used ",(0,r.kt)("inlineCode",{parentName:"p"},"XMLHttpRequest")," or other networking APIs before. You may refer to MDN's guide on ",(0,r.kt)("a",u({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"}),"Using Fetch")," for additional information."),(0,r.kt)("h4",u({},{id:"making-requests"}),"Making requests"),(0,r.kt)("p",null,"In order to fetch content from an arbitrary URL, you can pass the URL to fetch:"),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-jsx"}),"fetch('https://mywebsite.com/mydata.json');\n")),(0,r.kt)("p",null,"Fetch also takes an optional second argument that allows you to customize the HTTP request. You may want to specify additional headers, or make a POST request:"),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-jsx"}),"fetch('https://mywebsite.com/endpoint/', {\n  method: 'POST',\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    firstParam: 'yourValue',\n    secondParam: 'yourOtherValue'\n  })\n});\n")),(0,r.kt)("p",null,"Take a look at the ",(0,r.kt)("a",u({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/Request"}),"Fetch Request docs")," for a full list of properties."),(0,r.kt)("h4",u({},{id:"handling-the-response"}),"Handling the response"),(0,r.kt)("p",null,"The above examples show how you can make a request. In many cases, you will want to do something with the response."),(0,r.kt)("p",null,"Networking is an inherently asynchronous operation. Fetch methods will return a ",(0,r.kt)("a",u({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"}),"Promise")," that makes it straightforward to write code that works in an asynchronous manner:"),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-jsx"}),"function getMoviesFromApiAsync() {\n  return fetch('https://reactnative.dev/movies.json')\n    .then((response) => response.json())\n    .then((responseJson) => {\n      return responseJson.movies;\n    })\n    .catch((error) => {\n      console.error(error);\n    });\n}\n")),(0,r.kt)("p",null,"You can also use the proposed ES2017 ",(0,r.kt)("inlineCode",{parentName:"p"},"async"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"await")," syntax in a React Native app:"),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-jsx"}),"async function getMoviesFromApi() {\n  try {\n    let response = await fetch(\n      'https://reactnative.dev/movies.json'\n    );\n    let responseJson = await response.json();\n    return responseJson.movies;\n  } catch (error) {\n    console.error(error);\n  }\n}\n")),(0,r.kt)("p",null,"Don't forget to catch any errors that may be thrown by ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch"),", otherwise they will be dropped silently."),(0,r.kt)("div",u({},{className:"snack-player","data-snack-name":"Fetch Example","data-snack-description":"Example usage","data-snack-code":"import%20React%20from%20'react'%3B%0Aimport%20%7B%20FlatList%2C%20ActivityIndicator%2C%20Text%2C%20View%20%20%7D%20from%20'react-native'%3B%0A%0Aexport%20default%20class%20FetchExample%20extends%20React.Component%20%7B%0A%0A%20%20constructor(props)%7B%0A%20%20%20%20super(props)%3B%0A%20%20%20%20this.state%20%3D%7B%20isLoading%3A%20true%7D%0A%20%20%7D%0A%0A%20%20componentDidMount()%7B%0A%20%20%20%20return%20fetch('https%3A%2F%2Freactnative.dev%2Fmovies.json')%0A%20%20%20%20%20%20.then((response)%20%3D%3E%20response.json())%0A%20%20%20%20%20%20.then((responseJson)%20%3D%3E%20%7B%0A%0A%20%20%20%20%20%20%20%20this.setState(%7B%0A%20%20%20%20%20%20%20%20%20%20isLoading%3A%20false%2C%0A%20%20%20%20%20%20%20%20%20%20dataSource%3A%20responseJson.movies%2C%0A%20%20%20%20%20%20%20%20%7D%2C%20function()%7B%0A%0A%20%20%20%20%20%20%20%20%7D)%3B%0A%0A%20%20%20%20%20%20%7D)%0A%20%20%20%20%20%20.catch((error)%20%3D%3E%7B%0A%20%20%20%20%20%20%20%20console.error(error)%3B%0A%20%20%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%0A%0A%20%20render()%7B%0A%0A%20%20%20%20if(this.state.isLoading)%7B%0A%20%20%20%20%20%20return(%0A%20%20%20%20%20%20%20%20%3CView%20style%3D%7B%7Bflex%3A%201%2C%20padding%3A%2020%7D%7D%3E%0A%20%20%20%20%20%20%20%20%20%20%3CActivityIndicator%2F%3E%0A%20%20%20%20%20%20%20%20%3C%2FView%3E%0A%20%20%20%20%20%20)%0A%20%20%20%20%7D%0A%0A%20%20%20%20return(%0A%20%20%20%20%20%20%3CView%20style%3D%7B%7Bflex%3A%201%2C%20paddingTop%3A20%7D%7D%3E%0A%20%20%20%20%20%20%20%20%3CFlatList%0A%20%20%20%20%20%20%20%20%20%20data%3D%7Bthis.state.dataSource%7D%0A%20%20%20%20%20%20%20%20%20%20renderItem%3D%7B(%7Bitem%7D)%20%3D%3E%20%3CText%3E%7Bitem.title%7D%2C%20%7Bitem.releaseYear%7D%3C%2FText%3E%7D%0A%20%20%20%20%20%20%20%20%20%20keyExtractor%3D%7B(%7Bid%7D%2C%20index)%20%3D%3E%20id%7D%0A%20%20%20%20%20%20%20%20%2F%3E%0A%20%20%20%20%20%20%3C%2FView%3E%0A%20%20%20%20)%3B%0A%20%20%7D%0A%7D","data-snack-dependencies":"","data-snack-platform":"web","data-snack-supported-platforms":"ios,android,web","data-snack-theme":"light","data-snack-preview":"true","data-snack-loading":"lazy"})),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"By default, iOS will block any request that's not encrypted using ",(0,r.kt)("a",u({parentName:"p"},{href:"https://hosting.review/web-hosting-glossary/#12"}),"SSL"),". If you need to fetch from a cleartext URL (one that begins with ",(0,r.kt)("inlineCode",{parentName:"p"},"http"),") you will first need to ",(0,r.kt)("a",u({parentName:"p"},{href:"/docs/0.61/integration-with-existing-apps#test-your-integration"}),"add an App Transport Security exception"),". If you know ahead of time what domains you will need access to, it is more secure to add exceptions only for those domains; if the domains are not known until runtime you can ",(0,r.kt)("a",u({parentName:"p"},{href:"/docs/0.61/integration-with-existing-apps#app-transport-security"}),"disable ATS completely"),". Note however that from January 2017, ",(0,r.kt)("a",u({parentName:"p"},{href:"https://forums.developer.apple.com/thread/48979"}),"Apple's App Store review will require reasonable justification for disabling ATS"),". See ",(0,r.kt)("a",u({parentName:"p"},{href:"https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW33"}),"Apple's documentation")," for more information.")),(0,r.kt)("h3",u({},{id:"using-other-networking-libraries"}),"Using Other Networking Libraries"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",u({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest"}),"XMLHttpRequest API")," is built into React Native. This means that you can use third party libraries such as ",(0,r.kt)("a",u({parentName:"p"},{href:"https://github.com/niftylettuce/frisbee"}),"frisbee")," or ",(0,r.kt)("a",u({parentName:"p"},{href:"https://github.com/mzabriskie/axios"}),"axios")," that depend on it, or you can use the XMLHttpRequest API directly if you prefer."),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-jsx"}),"var request = new XMLHttpRequest();\nrequest.onreadystatechange = (e) => {\n  if (request.readyState !== 4) {\n    return;\n  }\n\n  if (request.status === 200) {\n    console.log('success', request.responseText);\n  } else {\n    console.warn('error');\n  }\n};\n\nrequest.open('GET', 'https://mywebsite.com/endpoint/');\nrequest.send();\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The security model for XMLHttpRequest is different than on web as there is no concept of ",(0,r.kt)("a",u({parentName:"p"},{href:"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing"}),"CORS")," in native apps.")),(0,r.kt)("h2",u({},{id:"websocket-support"}),"WebSocket Support"),(0,r.kt)("p",null,"React Native also supports ",(0,r.kt)("a",u({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/WebSocket"}),"WebSockets"),", a protocol which provides full-duplex communication channels over a single TCP connection."),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-jsx"}),"var ws = new WebSocket('ws://host.com/path');\n\nws.onopen = () => {\n  // connection opened\n  ws.send('something'); // send a message\n};\n\nws.onmessage = (e) => {\n  // a message was received\n  console.log(e.data);\n};\n\nws.onerror = (e) => {\n  // an error occurred\n  console.log(e.message);\n};\n\nws.onclose = (e) => {\n  // connection closed\n  console.log(e.code, e.reason);\n};\n")),(0,r.kt)("h2",u({},{id:"known-issues-with-fetch-and-cookie-based-authentication"}),"Known Issues with ",(0,r.kt)("inlineCode",{parentName:"h2"},"fetch")," and cookie based authentication"),(0,r.kt)("p",null,"The following options are currently not working with ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"redirect:manual")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"credentials:omit"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Having same name headers on Android will result in only the latest one being present. A temporary solution can be found here: ",(0,r.kt)("a",u({parentName:"li"},{href:"https://github.com/facebook/react-native/issues/18837#issuecomment-398779994"}),"https://github.com/facebook/react-native/issues/18837#issuecomment-398779994"),"."),(0,r.kt)("li",{parentName:"ul"},"Cookie based authentication is currently unstable. You can view some of the issues raised here: ",(0,r.kt)("a",u({parentName:"li"},{href:"https://github.com/facebook/react-native/issues/23185"}),"https://github.com/facebook/react-native/issues/23185")),(0,r.kt)("li",{parentName:"ul"},"As a minimum on iOS, when redirected through a ",(0,r.kt)("inlineCode",{parentName:"li"},"302"),", if a ",(0,r.kt)("inlineCode",{parentName:"li"},"Set-Cookie")," header is present, the cookie is not set properly. Since the redirect cannot be handled manually this might cause a scenario where infinite requests occur if the redirect is the result of an expired session.")))}g.isMDXComponent=!0}}]);